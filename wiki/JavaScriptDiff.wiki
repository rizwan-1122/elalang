#summary Overview in syntax differences between Ela and JavaScript

= Introduction =

This page contains a short description of differences in syntax between Ela and JavaScript. Of course the languages are not different only in syntax. The major points here are: 
  * JavaScript supports prototype based object oriented programming when Ela doesn't support it (but has a better support for functional programming)
  * Both languages are dynamically typed but Ela is strongly typed and JavaScript is not (e.g. it is not possible to sum strings and integers in Ela).
  * Both languages utilize a C-style syntax but Ela has a support for full lexical scope (similar to C/C++) when JavaScript does not.

= Details =

|| *Language Construct* || *JavaScript* || *Ela* || *Explanation* ||
|| Variable declaration || {{{ var x = 0; }}} || {{{ var x = 0; }}} || ||
|| Immutable variable declaration || {{{ N/A }}} || {{{ let x = 0; }}} || Immutable variables cannot be changed once declared. ||
|| Variable declaration without initialization || {{{ var x; }}} || {{{ N/A }}} || Initialization is mandatory in Ela. ||
|| Function declaration || {{{ function sum(x, y) { return x + y; } }}} || {{{ let sum(x, y) { x + y } }}} || ||
|| Anonymous function declaration || {{{ function(x, y) { return x + y; } }}} || {{{ \(x, y) x + y; }}} || ||
|| String literal || {{{ "Hello"; }}} or {{{ 'Hello'; }}} || {{{ "Hello"; }}} || Only double quotes can be used for strings in Ela.||
|| Char literal || {{{ N/A }}} || {{{ 'H'; }}} || ||
|| Array literal || {{{ var arr = [0, 1, 2, 3]; }}} || {{{ let arr = [| 0, 1, 2, 3 |]; }}} || ||
|| List literal || {{{ N/A }}} || {{{ let list = [0, 1, 2, 3]; }}} || ||
|| Object literal || {{{ var obj = { Foo: 1, Bar: 2 }; }}} || {{{ let obj = (Foo: 1, Bar: 2); }}} || ||
|| Tuple literal || {{{ N/A }}} || {{{ let t = (1, 2); }}} || ||
|| If with else || {{{ if (x) { } else { } }}} || {{{ if (x) { } else { } }}} || || 
|| If without else || {{{ if (x) { } }}} || {{{ when (x) { } }}} || ||
|| For cycle || {{{ for (var i = 0; i < 10; i++) { } }}} || {{{ for (i to 9) { } }}} || ||
|| Guards in for cycle || {{{ N/A }}} || {{{ for (i when i % 2 == 0 to 9) { } }}} || ||
|| Foreach cycle || {{{ for (x in coll) { } }}} || {{{ for (x in coll) { } }}} || ||
|| Pattern matching in foreach || {{{ N/A }}} || {{{ for ((x,y,3) in coll) { } }}} || ||
|| Get an item to array || {{{ var x = arr[0]; }}} || {{{ var x = arr[0]; }}} || ||
|| Add an item to array || {{{ arr[1] = 1; }}} || {{{ arr.add(1); }}} || ||
|| Remove an item from array || {{{ N/A }}} || {{{ arr.remove(1); }}} || ||
|| Insert an item to array || {{{ N/A }}} || {{{ arr.insert(1); }}} || ||
|| Add a field to object || {{{ obj.NewField = 1; }}} || {{{ N/A }}} || You can't dynamically add fields to objects (records) in Ela. ||
|| Swap two variables || {{{ var t = x; x = y; y = t; }}} || {{{ x <=> y }}}|| ||
|| Return a value from a function || {{{ function foo() { return 0; } }}} || {{{ let foo() 0; }}} || Keyword 'return' is supported by not required in Ela. ||
|| Strict comparison || {{{ x === y; x !== y; }}} || {{{ x == y; x != y; }}} || Comparisons are always strict in Ela. ||
|| Run code async || {{{ setTimeout(function() { 2 + 2 }, 0); }}} || {{{ async 2 + 2;; }}} || ||
|| Ternary operator || {{{ x ? 1 : 0; }}} || {{{ if (x) 1 else 0; }}} || Ternary operator is not supported in Ela, but 'if' is an expression. ||
|| Type check || {{{ if (typeof(obj) == "Number") { } }}} || {{{ if (obj is int) { } }}} || ||
|| Type structure check || {{{ N/A }}} || {{{ if (obj is (:Foo,:Bar)) { } }}} || Ela supports pattern matching using 'is' and 'match' operators. ||
|| Type conversion || {{{ parseInt(obj); }}} || {{{ obj :> int }}} || ||