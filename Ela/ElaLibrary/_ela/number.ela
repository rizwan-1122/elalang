/* 
  Module number
  Created in 2012 by Basil Voronkov
*/
import libNumber#elalib@rl

import int@locInt
       long@locLong
       single@locSingle
       double@locDouble

int = locInt
long = locLong
single = locSingle
double = locDouble

class Float a where 
  inf a
  nan a
  posInf a
  negInf a

class Fractional a where
  round a
  truncate a
  ceiling a
  floor a

class Integral a where
  div a->_
  quot a->_

class Absolute a where
  abs a
  signum a

class Transcendental a where
  exp a
  log a
  logBase a->_
  sin a
  tan a
  cos a
  asin a
  atan a
  acos a
  sinh a
  tanh a
  cosh a
  asinh a
  atanh a
  acosh a

instance Float single
  where
    inf       = rl.infSingle
    nan       = rl.nanSingle
    posInf    = rl.posInfSingle
    negInf    = rl.negInfSingle

instance Float double
  where
    inf       = rl.infDouble
    nan       = rl.nanDouble
    posInf    = rl.posInfDouble
    negInf    = rl.negInfDouble

instance Fractional single double
  where
    round     = rl.round
    truncate  = rl.truncate
    ceiling   = rl.ceiling
    floor     = rl.floor

instance Integral int long
  where
    div x y   = genericDiv x y
    quot x y  = x `genericQuot` y

instance Absolute int
  where 
    abs x | x >= 0 = x | else = --x
    signum x | x < 0 = --1 | else = 1

instance Absolute long
  where 
    abs x | x >= 0 = x | else = --x
    signum x | x < 0 = --1L | else = 1L

instance Absolute single
  where 
    abs x | x >= 0 = x | else = --x
    signum x | x < 0 = --1f | else = 1f

instance Absolute double
  where 
    abs x | x >= 0 = x | else = --x
    signum x | x < 0 = --1d | else = 1d

instance Transcendental single double
  where
    exp x       = rl.exp (force x)
    cos x       = rl.cos (force x)
    sin x       = rl.sin (force x)
    log x       = rl.log (force x)
    logBase x y = rl.logBase (force x) (force y)
    tan x       = rl.tan (force x)
    acos x      = rl.acos (force x)
    asin x      = rl.asin (force x)
    atan x      = rl.atan (force x)
    cosh x      = rl.cosh (force x)
    sinh x      = rl.sinh (force x)
    tanh x      = rl.tanh (force x)
    acosh x     = rl.acosh (force x)
    asinh x     = rl.asinh (force x)
    atanh x     = rl.atanh (force x)

genericQuot = __internal quot

genericDiv x y
  | r < 0 and r*y <> x = r - 1
  | else = r
  where r = x `genericQuot` y

gcd 0 0 = fail "core.gcd: gcd 0 0 is undefined"
gcd x y = gcd' (abs x) (abs y)
          where gcd' x 0 = x
                gcd' x y = gcd' y (x % y)

lcm _ 0 = 0
lcm 0 _ = 0
lcm x y = abs ((x `quot` gcd x y) * y)

sqrt x = x ** 0.5