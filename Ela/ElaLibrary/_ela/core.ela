/*
  Module core
  Created in 2012 by Basil Voronkov
*/
open generic

/* Maybe */
type Maybe = None | Some a
  deriving Eq Ord Show Default

instance ListLike Maybe where
  fromList [] = None
  fromList (x::[]) = Some x

maybe n _ None = n
maybe _ f (Some x) = f x

isSome None = false
isSome _    = true

fromSome (Some a) = a

fromMaybe d None = d
fromMaybe _ (Some x) = x

/* Either */
type Either = Left a | Right a
  deriving Eq Ord Show

either f _ (Left x) = f x
either _ g (Right y) = g y

isLeft (Left _) = true
isLeft _ = false

isRight (Right _) = true
isRight _ = false

lefts xs = [a \\ Left a <- xs]

rights xs = [a \\ Right a <- xs]

fromLeft (Left a) = a

fromRight (Right a) = a
