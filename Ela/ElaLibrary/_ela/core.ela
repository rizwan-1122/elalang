/*
  Module core
  Created in 2012 by Basil Voronkov
*/
open lang

/* ordering */
type ordering = EQ | LT | GT

compare x y 
  | x == y = EQ 
  | x < y = LT 
  | else = GT

maxValue x y 
  | x >= y = x 
  | else   = y

minValue x y 
  | x <= y = x 
  | else   = y

/* option */
type option a = Some a | None

maybe n _ None = n
maybe _ f (Some x) = f x

isSome None = false
isSome _    = true

fromSome (Some a) = a

fromOption d None = d
fromOption _ (Some x) = x

/* either */
type either a = Left a | Right a

takeEither f _ (Left x) = f x
takeEither _ g (Right y) = g y

lefts xs = [a \\ Left a <- xs]

rights xs = [a \\ Right a <- xs]

fromLeft (Left a) = a

fromRight (Right a) = a

/* Common instances */
instance Show ordering option either where
  showf = genericShow

instance Eq ordering option either where
  (==) = genericEq
  (<>) = genericNeq

/* Generic functions */
showParamList # private
showParamList f t = tos 0
  where len = length t
        tos n | n == len - 1 = [e]
              | else = e :: " " :: tos (n+1)
              where e = showf f (t:n) 

genericShow f a = lang.__stringFromList (tag a :: v)
  where u = untag a 
        v = match u with () = []; _  = " " :: showParamList f u

genericPred p a b = tag a `p` tag b and untag a `p` untag b

genericEq = genericPred (==)

genericNeq = genericPred (<>)
