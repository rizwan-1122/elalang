/* 
  Module queue
  Created in 2012 by Basil Voronkov
*/
open list

/* Construction */
type queue
  where 
        fromPair # private
        fromPair (f,b) = Queue (f,b)
        fromList # qualified
        fromList xs = fromPair (reverse xs, [])
        empty # qualified
        empty = fromPair ([],[])

/* Instances */
instance Show queue
  where showf f q = "queue" ++ showf f (toList q)

instance Cat queue
  where q1 ++ q2 = toList q1 ++ toList q2

instance Eq queue
  where q1 == q2 = toList q1 == toList q2
        q1 <> q2 = toList q1 <> toList q2

instance Seq queue
  where head = peek
        tail = dequeue
        isnil (Queue ([],[])) = true
        isnil _ = false

instance Ix queue
  where q : i = toList q : i
        length (Queue (f,b)) = length f + length b

/* Functions */
toList # qualified
toList (Queue (f,b)) = f ++ reverse b

enqueue e (Queue (f,b)) = enq f b
      where enq [] b = fromPair ([e], b)
            enq f b  = fromPair (f, e::b)

dequeue (Queue (f,b)) = deq f b
      where deq [] [] = fail "Empty queue."
            deq (_::[]) [] = empty
            deq (_::[]) ys = fromPair (reverse ys, [])
            deq xs ys = fromPair (tail xs,ys)

peek (Queue (f,b)) = peek' f b
      where peek' [] [] = fail "Empty queue."
            peek' (x::_) _ = x