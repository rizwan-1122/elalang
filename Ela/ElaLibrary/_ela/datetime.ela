/* 
  Module datetime
  Created in 2012 by Basil Voronkov
*/
import libDateTime#elalib@dt 

/* Construction */
type datetime
      where 
            fromTicks (x is long) = DateTime x
     
            fromTuple (y,m,d) = DateTime (dt.newDateTime y m d 0 0 0 0)
            fromTuple (y,m,d,h,mm) = DateTime (dt.newDateTime y m d h mm 0 0)
            fromTuple (y,m,d,h,mm,s,ms) = DateTime (dt.newDateTime y m d h mm s ms)
     
            now () = DateTime (dt.now!)
           
            today () = DateTime (dt.today!)
           
            min # qualified
            min = DateTime dt.maxDateTime
           
            max # qualified
            max = DateTime dt.maxDateTime

/* Instances */
instance Eq datetime
  where (DateTime x) == (DateTime y) = x == y
        (DateTime x) <> (DateTime y) = x <> y

instance Ord datetime
  where (DateTime x) > (DateTime y) = x > y
        (DateTime x) < (DateTime y) = x < y
        (DateTime x) >= (DateTime y) = x >= y
        (DateTime x) <= (DateTime y) = x <= y

instance Show datetime
  where showf fmt (DateTime x) = dt.formatToString fmt x

/* Functions */
add (DateTime x) (DateTime y) = fromTicks <| dt.add x y

addTicks (DateTime x) (DateTime y) = fromTicks <| dt.addTicks x y

addMilliseconds (DateTime x) (DateTime y) = fromTicks <| dt.addMilliseconds x y

addSeconds (DateTime x) (DateTime y) = fromTicks <| dt.addSeconds x y

addMinutes (DateTime x) (DateTime y) = fromTicks <| dt.addMinutes x y

addHours (DateTime x) (DateTime y) = fromTicks <| dt.addHours x y

addDays (DateTime x) (DateTime y) = fromTicks <| dt.addDays x y

addMonths (DateTime x) (DateTime y) = fromTicks <| dt.addMonths x y

addYears (DateTime x) (DateTime y) = fromTicks <| dt.addYears x y

years (DateTime x) = dt.years x

months (DateTime x) = dt.months x

days (DateTime x) = dt.days x

hours (DateTime x) = dt.hours x

minutes (DateTime x) = dt.minutes x

seconds (DateTime x) = dt.seconds x

milliseconds (DateTime x) = dt.milliseconds x

ticks (DateTime x) = dt.ticks x

dayOfWeek (DateTime x) = dt.dayOfWeek x

dayOfYear (DateTime x) = dt.dayOfYear x

date (DateTime x) = fromTicks <| dt.date x

diff (DateTime x) (DateTime y) = dt.diff x y

diffSeconds x y = seconds (diffTicks x y)

diffMilliseconds x y = milliseconds (diffTicks x y)

diffTicks (DateTime x) (DateTime y) = x - y

parse fmt str = fromTicks (dt.parse fmt str)