/* 
  Module string
  Created in 2012 by Basil Voronkov
*/
import libString#elalib@str
import lang

instance ListLike String
  where toList x = str.toList x

upper x = str.upper (force x)
lower x = str.lower (force x)

trim x = str.trim (force x)
trimChars = collect str.trimChars []
trimStart s = str.trimStart (force s)
trimStartChars = collect str.trimStartChars []
trimEnd s = str.trimEnd (force s)
trimEndChars = collect str.trimEndChars []

indexOf search s = str.indexOf (force search) (force s)
indexOfFrom search idx s = str.indexOfFrom (force search) (force idx) (force s)
indexOfLast search s = str.indexOfLast (force search) (force s)

startsWith search s = str.startsWith (force search) (force s)
endsWith search s = str.endsWith (force search) (force s)

replace search repl s = str.replace (force search) (force repl) (force s)

remove start n s = str.remove (force start) (force n) (force s)

substr start n s = str.substr (force start) (force n) (force s)

split sep s = str.split (force sep) (force s)

insert idx ins s = str.insert (force idx) (force ins) (force s)

fromList # qualified
fromList xs = toString <| trav stringBuilder xs
  where trav sb (x::xs) = trav (sb +> toString x) xs
        trav sb [] = sb

//This function is used to collect chars in a list
collect # private
collect fn xs x 
  | x is Char = collect fn (x::xs)
  | else = fn xs x
