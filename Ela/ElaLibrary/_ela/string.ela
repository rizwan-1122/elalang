/* 
  Module string
  Created in 2012 by Basil Voronkov
*/
import libString#elalib@str

upper (x is string) = str.upper x
lower (x is string) = str.lower x

trim (x is string) = str.trim x
trimChars = collect str.trimChars []
trimStart s = str.trimStart (force s)
trimStartChars = collect str.trimStartChars []
trimEnd s = str.trimEnd (force s)
trimEndChars = collect str.trimEndChars []

indexOf (search is string) (s is string) = str.indexOf search s
indexOfFrom (search is string) (idx is int) (s is string) = str.indexOfFrom search idx s

startsWith (search is string) (s is string) = str.startsWith search s
endsWith (search is string) (s is string) = str.endsWith search s

replace (search is string) (repl is string) (s is string) = str.replace search repl s

remove (start is int) (n is int) (s is string) = str.remove start n s

substr (start is int) (n is int) (s is string) = str.substr start n s

split (sep is string) (s is string) = str.split sep s

insert (idx is int) (ins is string) (s is string) = str.insert idx ins s

fromList # qualified
fromList (x::xs) = x ++ fromList xs
fromList [] = ""

toList # qualified
toList (x is string) = str.toList x

//This function is used to collect chars in a list
collect # private
collect fn xs (x is char) = collect fn (x::xs)
collect fn xs (x is string) = fn xs x