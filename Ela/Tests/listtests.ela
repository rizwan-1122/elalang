open core

fromLiteral {eq} =
  let list = ['E', 'l', 'a'] in
    eq (length list) 3
  $ eq (list:0) 'E'
  $ eq (list:1) 'l'
  $ eq (list:2) 'a'

cons {eq} =
  let list = 0::1::2::3::[] in
    eq (length list) 4
  $ eq (list:0) 0
  $ eq (list:3) 3

headTail {eq} =
  let head (x::_) = x
      tail (_::xs) = xs
      list = [0, 1, 2, 3]
  in eq (head list) 0
  $ eq ((tail list) |> length) 3
  $ eq ((tail list):0) 1
       
headTail2 {eqt} = eqt res
  where lst = [1,2,3]
        res = match lst with
                    [1]   = false
                    [1,2] = false
                    [1,2,3] = true

zips {eqt} =
  let zip (x::xs) (y::ys) = (x, y) :: zip xs ys
      zip _ _ = []
      f1 = zip [1,2,3,4,5] [5,5,5,5,5]
      f2 = zip [5,3,2,6,2,7,2,5,4,6,6] ["im","a","turtle"] 
  in eqt (f1:0 == (1, 5))
  $ eqt (f1:1 == (2, 5))
  $ eqt (f1:2 == (3, 5))
  $ eqt (f1:3 == (4, 5))
  $ eqt (f1:4 == (5, 5))
  $ eqt (f2:0 == (5,"im"))
  $ eqt (f2:1 == (3,"a"))
  $ eqt (f2:2 == (2,"turtle"))

structuralComp {eqt,eqf} =
    eqt (xs1 == xs2)
  $ eqf (xs1 == xs3)
  $ eqt (xs1 <> xs3)
  $ eqt (xs2 <> xs3)
  $ eqt (xs3 == [1..10])
  $ eqt (xs3 == xs4)
  $ eqf (xs2 == xs4)
        where xs1 = [1..5]
              xs2 = [1..5]
              xs3 = [1..10]
              xs4 = [& x \\ x <- [1..10]]

reverseElems {eqt} =
  let reverse' (x::xs) = reverse' xs ++ [x]
      reverse' [] = [] 
      res = reverse' [0, 1, 2, 3, 4, 5] 
  in eqt (res == [5,4,3,2,1,0])

skipElems {eqt} = 
  let skip lst n = 
        let ps (x::xs) i | i == n = xs | else   = ps xs (i + 1)
            ps _ _ = () 
        in match ps lst 1 with
                 r is list = Some r
                 _ = None
  in
  let res = skip [0, 1, 2, 3] 2 in
  eqt <| res == Some [2,3]

takeElems {eqt} =
  let take lst n =
        let pt (x::xs) i | i == n = [x] | else   = x :: pt xs (i + 1)
            pt _ _ = [] 
        in let r = pt lst 1
        in if r == [] then None else Some r 
  in
  let res = take [0,1,2,3,4] 3 in
  eqt <| res == Some [0,1,2]

lazyList {eq} =
  eq [3,4,5] (filter' (>2) xs)
  where xs = (& [1..5])
        filter' p [] = []
        filter' p (x::xs) | p x  = x :: filter' p xs
                          | else = filter' p xs

typeCheck {eqt} =
  let list = [0, 1] in
  eqt (match list with _ is list = true; _ = false;;)

lazyCatShow {eq} =
    eq (show <| [1,2,3]++[& x \\ x<-[1..3]]) "[1,2,3,1,2,3]"
  $ eq (show <| [& x \\ x<-[1..3]]++[1,2,3]) "[1,2,3,1,2,3]"

lazyFoldr {eq} =
    eq xs [2,3,4,5,6]
    where foldr f z (x::xs) = f x (& foldr f z xs)
          foldr _ z []      = z
          take 0 xs      = []
          take n (x::xs) = x :: take (n-1) xs
          take _ []      = []
          map' f = foldr ((::) << f) []
          xs = take 5 <| map' (+1) [1..]
