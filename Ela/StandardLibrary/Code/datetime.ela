/* 
    Module datetime
    Created in 2012 by Basil Voronkov
*/
open qualified "$DateTime"#elalib@dt

/* Construction */
type datetime x = cons x
        where cons ?long@x = DateTime x
              cons (y,m,d) = DateTime (dt.newDateTime y m d 0 0 0 0)
              cons (y,m,d,h,mm) = DateTime (dt.newDateTime y m d h mm 0 0)
              cons (y,m,d,h,mm,s,ms) = DateTime (dt.newDateTime y m d h mm s ms)

let now () = datetime <| dt.now!

let today () = datetime <| dt.today!

let maxDateTime = datetime <| dt.maxDateTime

let minDateTime = datetime <| dt.minDateTime

/* Instances */
instance Eq datetime
  where (DateTime x) == (DateTime y) = x == y
     et (DateTime x) <> (DateTime y) = x <> y

instance Ord datetime
  where (DateTime x) > (DateTime y) = x > y
     et (DateTime x) < (DateTime y) = x < y
     et (DateTime x) >= (DateTime y) = x >= y
     et (DateTime x) <= (DateTime y) = x <= y

instance Show datetime
  where showf fmt (DateTime x) = dt.formatToString fmt x

//instance Read datetime
//  where readf fmt str = datetime (dt.parse fmt str)

instance Typeable datetime
  where cast ?long x = dt.ticks x

/* Functions */
let add (DateTime x) (DateTime y) = datetime <| dt.add x y

let addTicks (DateTime x) (DateTime y) = datetime <| dt.addTicks x y

let addMilliseconds (DateTime x) (DateTime y) = datetime <| dt.addMilliseconds x y

let addSeconds (DateTime x) (DateTime y) = datetime <| dt.addSeconds x y

let addMinutes (DateTime x) (DateTime y) = datetime <| dt.addMinutes x y

let addHours (DateTime x) (DateTime y) = datetime <| dt.addHours x y

let addDays (DateTime x) (DateTime y) = datetime <| dt.addDays x y

let addMonths (DateTime x) (DateTime y) = datetime <| dt.addMonths x y

let addYears (DateTime x) (DateTime y) = datetime <| dt.addYears x y

let years (DateTime x) = dt.years x

let months (DateTime x) = dt.months x

let days (DateTime x) = dt.days x

let hours (DateTime x) = dt.hours x

let minutes (DateTime x) = dt.minutes x

let seconds (DateTime x) = dt.seconds x

let milliseconds (DateTime x) = dt.milliseconds x

let ticks (DateTime x) = dt.ticks x

let dayOfWeek (DateTime x) = dt.dayOfWeek x

let dayOfYear (DateTime x) = dt.dayOfYear x

let date (DateTime x) = datetime <| dt.date x

let diff (DateTime x) (DateTime y) = dt.diff x y

let diffSeconds x y = seconds (diffTicks x y)

let diffMilliseconds x y = milliseconds (diffTicks x y)

let diffTicks (DateTime x) (DateTime y) = x - y