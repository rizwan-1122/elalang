<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssignImmutableVariable" xml:space="preserve">
    <value>Unable to change a value of an immutable variable '{0}'.</value>
  </data>
  <data name="BaseNotAllowed" xml:space="preserve">
    <value>Keyword 'base' is not valid in this context.</value>
  </data>
  <data name="BaseVariableNotFound" xml:space="preserve">
    <value>A name '{0}' is not defined in the parent scope (referenced using 'base').</value>
  </data>
  <data name="BreakExecutionNotAllowed" xml:space="preserve">
    <value>An expression breaks execution and is not allowed in this context.</value>
  </data>
  <data name="BreakNotAllowed" xml:space="preserve">
    <value>Expression 'break' is not allowed in this context.</value>
  </data>
  <data name="ContinueNotAllowed" xml:space="preserve">
    <value>Expression 'continue' is not allowed in this context.</value>
  </data>
  <data name="ForeachNoInitialization" xml:space="preserve">
    <value>Initialization expression is not supported in for/in cycles.</value>
  </data>
  <data name="InvalidConstructorBody" xml:space="preserve">
    <value>Last expression in a constructor declaration should be a tuple or a record literal.</value>
  </data>
  <data name="InvalidFunctionDeclaration" xml:space="preserve">
    <value>Invalid function declaration. Function should comply to the form: n -&gt; expr or (n, ...) -&gt; expr or () -&gt; expr if a function doesn't have parameters.</value>
  </data>
  <data name="InvalidParameterDeclaration" xml:space="preserve">
    <value>Invalid function declaration. All function parameters if any should be valid identifiers. If function has more than one parameter all parameters should be enclosed in braces.</value>
  </data>
  <data name="MatchEntryTypingFailed" xml:space="preserve">
    <value>Data types of a match entry are incompatible with previous entries.</value>
  </data>
  <data name="MatchHeadTailPatternNil" xml:space="preserve">
    <value>A list nil constructor ([]) can only be used at the end of a head/tail (x::xs) pattern.</value>
  </data>
  <data name="MatchNotSupportedInFor" xml:space="preserve">
    <value>Pattern matching is not allowed in for/to and for/downto cycles.</value>
  </data>
  <data name="MatchOrPatternVariables" xml:space="preserve">
    <value>When using '||' (or) pattern in match all cases should declare the same number of variables.</value>
  </data>
  <data name="OperatorAlreadyDeclared" xml:space="preserve">
    <value>Operator '{0}' is already declared in this module.</value>
  </data>
  <data name="OperatorBinaryTwoParams" xml:space="preserve">
    <value>Binary operator should have exactly two parameters.</value>
  </data>
  <data name="OperatorOnlyInGlobal" xml:space="preserve">
    <value>Operators can be declared only in the global scope.</value>
  </data>
  <data name="OperatorUnaryOneParam" xml:space="preserve">
    <value>Unary operator should have a single parameter.</value>
  </data>
  <data name="PlaceholderNotValid" xml:space="preserve">
    <value>An expression '_' is not valid in this context.</value>
  </data>
  <data name="ReturnInGenerator" xml:space="preserve">
    <value>Expression 'return' is not allowed in generator.</value>
  </data>
  <data name="ReturnInGlobal" xml:space="preserve">
    <value>Expression 'return' is allowed only inside functions.</value>
  </data>
  <data name="StrictModeMutableGlobal" xml:space="preserve">
    <value>Unable to declare a mutable global scope variable when the strict mode is on.</value>
  </data>
  <data name="UnableAssignExpression" xml:space="preserve">
    <value>Unable to assign a value to this expression.</value>
  </data>
  <data name="UndefinedVariable" xml:space="preserve">
    <value>Undefined name '{0}'.</value>
  </data>
  <data name="VariableAlreadyDeclared" xml:space="preserve">
    <value>Variable '{0}' is already declared.</value>
  </data>
  <data name="VariableDeclarationInitMissing" xml:space="preserve">
    <value>Variables cannot be declared without initialization.</value>
  </data>
  <data name="YieldNotAllowed" xml:space="preserve">
    <value>Expression 'yield' is not allowed in this context.</value>
  </data>
</root>