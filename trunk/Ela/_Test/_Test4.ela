let run n | n > 0 = 2 - 2 $ run (n-1)
          | else = ()
          

//run 1000000

let cat x = (x ++) >> (++)


open Con
open Core
 
let zipWith3 f (x::xs) (y::ys) (z::zs) = f x y z :: zipWith3 f xs ys zs
    zipWith3 _ _ _ _ = []
 
//let xs = zipWith3 (\x y z -> show x ++ show y ++ show z) ['a','b','c'] ['A','B','C'] [1,2,3]
//let xs = zipWith3 (\x -> (x++) >> (++)) "abc" "ABC" "123"
 
let div4 x 0 = None //The divider is zero, just return
    div4 x y = Some (x / y) //The divider
    
"str" ++ div4 12 4

/*
aA1
bB2
cC3

687

0.290	
0.293
0.289

0.311
0.310
0.312
*/