open Math

let rule1 exp?symbol = def (`cos `pi) (--1d) exp;
          exp        = exp

let rule2 exp?symbol = def (`cos 0d) 1d exp;
          exp        = exp

let rule3 exp?symbol = rule (`cos (--`x)) (`cos `x) exp;
          exp        = exp

let rule4 exp?symbol = def (`cos (`pi / 3d)) 1.047D exp;
          exp        = exp

let rule5 exp?symbol = def `mod mod r
                where mod x | x % 2d == 0d = --1d;
                            | else       = 1d and
                      r = rule (`x * `pi) (`mod `x) exp
                end;
          exp        = exp
                
let rule6 exp?symbol = def `mod mod r
                where mod x y | x % 2d == 0d = -- Math.cos y;
                              | else       = Math.cos y and
                      r = rule (`x * `pi + `y) (`mod `x `y) exp
                end;
          exp        = exp
                
let apply = 
            where rule1 = rule1 >> rule2 >> rule3 >> rule4 >> rule5 >> rule6 and
                  rule2 = rule2 >> rule1 >> rule3 >> rule4 >> rule5 >> rule6 and
                  rule3 = rule3 >> rule2 >> rule1 >> rule4 >> rule5 >> rule6 and

let _ = cout <| apply (`cos (3d*`pi + `pi/3d))