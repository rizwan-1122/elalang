/*
  Module tuple
  Created in 2012 by Basil Voronkov
*/
open thunk
import lang

/* Instances */
instance Additive tuple
  where (+)  = join (+)
        (-)  = join (-)
        --x  = zero (length x) - x

instance Enum tuple
  where succ = map succ
        pred = map pred

/* Functions */
fromList # qualified
fromList xs = lang.__tupleFromList ys
  where ys | lang.__isLazyList xs = forceOnlyList xs
           | else = xs

toList # qualified
toList t = tol 0
  where
    len = length t
    tol n | n == len = []
          | else = t:n :: tol (n+1)

map # qualified
map f tup = lang.__tupleFromList (m 0)
  where 
    len = length tup
    m n | n == len = []
        | else = f (tup:n) :: m (n+1)

join # qualified
join f (x,) (a,) = (x `f` a,)
join f (x,y) (a,b) = (x `f` a, y `f` b)
join f (x,y,z) (a,b,c) = (x `f` a,y `f` b,z `f` c)
join f t1 t2 
  | len <> length t2 = fail "Tuples should be of the same length." 
  | else = lang.__tupleFromList (fold 0)
  where len = length t1
        fold n | n == len = []
               | else = (t1:n `f` t2:n) :: fold (n+1)

any # qualified
any f t = m 0
  where len = length t
        m n | n == len = false
            | f (t:n) = true
            | else = m (n+1)

all # qualified
all f t = m 0
  where len = length t
        m n | n == len = true
            | f (t:n) = m (n+1)
            | else = false

zero # private
zero 1 = (0,)
zero 2 = (0,0)
zero 3 = (0,0,0)
zero n = lang.__tupleFromList (gen n)
  where gen n | n == 1 = [0] | else = 0 :: zero (n-1)
