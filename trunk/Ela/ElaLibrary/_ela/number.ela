/* 
  Module number
  Created in 2012 by Basil Voronkov
*/
import libNumber#elalib@rl

single = 
  {
    e = 2.718282f,
    pi = 3.141593f
  }

double = 
  {
    e = 2.7182818284590451D,
    pi = 3.1415926535897931D
  }

class Float a where 
  inf a
  nan a
  posInf a
  negInf a

class Fractional a where
  round a
  truncate a
  ceiling a
  floor a

class Integral a where
  div a->_
  quot a->_

class Absolute a where
  abs a
  signum a

class Transcendental a where
  exp a
  log a
  sqrt a
  logBase a->_
  sin a
  tan a
  cos a
  asin a
  atan a
  acos a
  sinh a
  tanh a
  cosh a
  asinh a
  atanh a
  acosh a

class Principal a where
  gcd a->a
  lcm a->a

instance Float Single
  where
    inf       = rl.infSingle
    nan       = rl.nanSingle
    posInf    = rl.posInfSingle
    negInf    = rl.negInfSingle

instance Float Double
  where
    inf       = rl.infDouble
    nan       = rl.nanDouble
    posInf    = rl.posInfDouble
    negInf    = rl.negInfDouble

instance Fractional Single Double
  where
    round     = rl.round
    truncate  = rl.truncate
    ceiling   = rl.ceiling
    floor     = rl.floor

instance Integral Int Long where
  quot = __internal quot
  div x y
    | r < 0 and r*y <> x = r - 1
    | else = r
    where r = x `quot` y

instance Absolute Int where
  abs = genericAbs
  signum x 
    | x < 0 = --1 
    | else = 1

instance Absolute Long where
  abs = genericAbs
  signum x 
    | x < 0 = --1L 
    | else = 1L

instance Absolute Single where
  abs = genericAbs
  signum x 
    | x < 0 = --1f 
    | else = 1f

instance Absolute Double where
  abs = genericAbs
  signum x 
    | x < 0 = --1d 
    | else = 1d

instance Transcendental where
  logBase x y = log y / log x
  tan x       = sin x / cos x
  tanh x      = sinh x / cosh x

instance Transcendental Single Double where
  sqrt x      = x ** 0.5
  exp x       = rl.exp (force x)
  cos x       = rl.cos (force x)
  sin x       = rl.sin (force x)
  log x       = rl.log (force x)
  logBase x y = rl.logBase (force x) (force y)
  tan x       = rl.tan (force x)
  acos x      = rl.acos (force x)
  asin x      = rl.asin (force x)
  atan x      = rl.atan (force x)
  cosh x      = rl.cosh (force x)
  sinh x      = rl.sinh (force x)
  tanh x      = rl.tanh (force x)
  acosh x     = rl.acosh (force x)
  asinh x     = rl.asinh (force x)
  atanh x     = rl.atanh (force x)

instance Principal Int Long Single Double where  
  gcd 0 0 = fail "Principal.gcd: gcd 0 0 is undefined"
  gcd x y = gcd' (abs x) (abs y)
            where gcd' x 0 = x
                  gcd' x y = gcd' y (x % y)
  lcm _ 0 = 0
  lcm 0 _ = 0
  lcm x y = abs ((x `quot` gcd x y) * y)

/* Privates */
genericAbs # private
genericAbs x 
    | x >= 0 = x 
    | else = --x
