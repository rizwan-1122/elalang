/*
  Module espec
  Created in 2012 by Basil Voronkov
*/
open reflect list format

/* Types */
type EndOfTest # private
type EndOfTest = EndOfTest

type Word # private
type Word = Do a | Apply a | Pred a | Given a | Fun a | Other | Test a

type Result # private
type Result = Success | Failed a | Error a

/* Words */
test = test_sg []

test_sg # private
test_sg xs t EndOfTest = Test t :: reverse xs
test_sg xs t Do = test_apply t xs Do
test_sg xs t Apply = test_apply t xs Apply
test_sg xs t (Pred pred) = test_pred t xs pred
test_sg xs t Given = test_given t xs
test_sg xs t err = fail (formatStr "Unexpected word: {0}." (name err))
  where 
    name w 
      | w is Fun = funName w
      | else = word w
      where 
        word (Pred (n,_)) = n
        word (Fun (n,_)) = n
        word Do = "do"
        word Apply = "apply"
        word Other = "other"
        word x = show x

test_given # private
test_given t xs x = test_sg (Given x :: xs) t

test_apply # private
test_apply t xs tit fn
      | maxN == 0 = test_sg (tit (fn,[]) :: xs) t
      | else = test_apply_for 1 [] fn
  where args = funArgsCount fn - funAppliedArgsCount fn
        maxN | args > 0 = args - 1 | else = 0
        test_apply_for n ys fn x 
          | n < maxN = test_apply_for (n+1) (x::ys) fn
          | else = test_sg (tit (fn,x::ys) :: xs) t

test_pred # private
test_pred t xs pred fn arg = test_sg (val::xs) t
  where val = Pred (pred,fn,arg)

should = Pred ("should", id)
shouldn't = Pred ("shouldn't", not)
be = Fun ("be", ==)
lesser = Fun ("lesser", <)
greater = Fun ("greater", >)
lesserEqual = Fun ("lesserEqual", <=)
greaterEqual = Fun ("greaterEqual", >=)
contain = Fun ("contain", flip elem)
do = Do ()
apply = Apply ()
given = Given ()

/* Execution */
exec # private
exec z [] = z
exec z (x::xs) = exec (eval z x) xs
  where eval (_,lst) (Test n) = () => Test n :: lst
        eval (_,lst) (Given x) = x => Given x :: lst
        eval (x,lst) (Do (fn,args)) = 
            res => Do (funName fn, args, res) :: lst
            where res = evalFun fn (x :: reverse args)
        eval (x,lst) (Apply (fn,args)) = 
            res => Apply (funName fn, args, res) :: lst
            where res = evalFun fn (args ++ [x])
        eval (x,lst) (Pred ((nm,pred),Fun (fnm,fn),arg)) = 
            x => Pred (nm,fnm,arg,res) :: lst
            where res = evalPred pred fn x arg
        evalFun fn (x::xs) = evalFun (fn x) xs
        evalFun fn _ = fn
        evalPred p fn x y = try test p fn x y with e = Error e
        test p fn x y | p (fn x y) = Success | else = Failed x

execTests # private
execTests (x::xs) = (reverse <| snd (exec init x)) :: execTests xs
execTests [] = []

run = reverse << execTests

/* Registration */
addTest fn xs = fn EndOfTest :: xs

addTests mod xs = foldl (flip (::)) xs funs
  where funs = map (\f -> f EndOfTest) <| 
          filter (same test_sg) <| map (getField "value") <| moduleExportList mod

init # private
init = ((),[])

same # private
same f g
  | (f is Fun) and (g is Fun) = 
    funModule f == funModule g and funHandle f == funHandle g
  | else = false

/* Format result as string */
stat # private
stat f e [] = (f,e)
stat f e (Pred (_,_,_,Failed)::xs) = stat (f+1) e xs
stat f e (Pred (_,_,_,Error)::xs) = stat f (e+1) xs
stat f e (_::xs) = stat f e xs

report # private
report xs = (f, e, toString <| report_stat stringBuilder f e xs)
  where (f,e) = stat 0 0 xs

report_stat # private
report_stat sb _ _ [] = sb
report_stat sb f e (x::xs) = report_stat (sb +> (item x) +> "\r\n") f e xs
  where item (Test n) = formatStr "\r\nTest \"{0}\" (failed {1}, errors {2}):" n f e
        item (Given x) = formatStr "  given {0}" x
        item (Pred (nm,fnm,val,res)) = formatStr "    {0} {1} {2} -> {3}" nm fnm val (result res)
        item (Do (fn,args,res)) = formatStr "    do {0}{1} -> {2}" fn (itemDo args) res
        item (Apply (fn,args,res)) = formatStr "    apply {0}{1} -> {2}" fn (itemDo args) res
        itemDo [] = ""
        itemDo (y::ys) = formatStr " {0}{1}" (ystr y) (itemDo ys)
          where ystr y | y is Fun = funName y 
                       | else = show y
        result Success = "success"
        result (Error m) = formatStr "error: {0}" m
        result (Failed x) = formatStr "failed (got {0})" x

formatGen # private
formatGen n fc str [] = (n,fc,str)
formatGen n fc str (x::xs) = formatGen (n+1) failed (str++r) xs
  where (f,e,r) = report x
        failed | f+e>0 = fc + 1 | else = fc

formatResult xs = 
  formatStr "Test session started.\r\n{0}\r\nTotal tests:{1} Failed: {2}" 
            str n f
  where (n,f,str) = formatGen 0 0 "" xs
