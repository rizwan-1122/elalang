/* 
  Module queue
  Created in 2012 by Basil Voronkov
*/
open core

/* Construction */
type queue (f,b) = Queue (f,b)

let empty = queue ([],[])

let fromList xs = queue (reverse xs, [])

/* Instances */
instance Show queue
  where showf f q = "queue" ++ showf f (toList q)

instance Typeable queue
  where cast ?list (Queue (f,b)) = f ++ reverse b

instance Cat queue
  where q1 ++ q2 = toList q1 ++ toList q2

instance Eq queue
  where q1 == q2 = toList q1 == toList q2
     et q1 <> q2 = toList q1 <> toList q2

instance Seq queue
  where head = peek
     et tail = dequeue
     et isnil (Queue ([],[])) = true
        isnil _ = false

instance Ix queue
  where q : i = toList q : i
     et length (Queue (f,b)) = length f + length b

/* Functions */
let enqueue e (Queue (f,b)) = enq f b
      where enq [] b = queue ([e], b)
            enq f b  = queue (f, e::b)

let dequeue (Queue (f,b)) = deq f b
      where deq [] [] = fail "Empty queue."
            deq (_::[]) [] = empty
            deq (_::[]) ys = queue (reverse ys, [])
            deq xs ys = queue (tail xs,ys)

let peek (Queue (f,b)) = peek' f b
      where peek' [] [] = fail "Empty queue."
            peek' (x::_) _ = x