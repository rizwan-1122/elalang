/*
  Module core
  Created in 2012 by Basil Voronkov
*/
open lang

/* ordering */
type Ordering = EQ | LT | GT

compare x y 
  | x == y = EQ 
  | x < y = LT 
  | else = GT

maxValue x y 
  | x >= y = x 
  | else   = y

minValue x y 
  | x <= y = x 
  | else   = y

/* option */
type Maybe = Some a | None

maybe n _ None = n
maybe _ f (Some x) = f x

isSome None = false
isSome _    = true

fromSome (Some a) = a

fromMaybe d None = d
fromMaybe _ (Some x) = x

/* either */
type Either = Left a | Right a

either f _ (Left x) = f x
either _ g (Right y) = g y

lefts xs = [a \\ Left a <- xs]

rights xs = [a \\ Right a <- xs]

fromLeft (Left a) = a

fromRight (Right a) = a

/* Common instances */
instance Show Ordering Maybe Either

instance Eq Ordering Maybe Either
