/*
  Module core
  Created in 2012 by Basil Voronkov
*/
open lang

/* Types */
type ordering = EQ | LT | GT

type option a = Some a | None

type either a = Left a | Right a

/* Instances */
instance Show ordering option either where
  showf = genericShow

instance Eq ordering option either where
  (==) = genericEq
  (<>) = genericNeq
  
instance Enum ordering where
  succ (EQ _) = LT
  succ (LT _) = GT
  succ (GT _) = EQ
  pred (EQ _) = GT
  pred (LT _) = EQ
  pred (GT _) = LT

/* Functions */
compare x y 
  | x == y = EQ 
  | x < y = LT 
  | else = GT

fromSome (Some a) = a

fromLeft (Left a) = a

fromRight (Right a) = a

showParamList # private
showParamList f t = tos 0
  where len = length t
        tos n | n == len - 1 = [e]
              | else = e :: " " :: tos (n+1)
              where e = showf f (t:n) 

genericShow f a = lang.__stringFromList (tag a :: v)
  where u = untag a 
        v = match u with () = []; _  = " " :: showParamList f u

genericPred p a b = tag a `p` tag b and untag a `p` untag b

genericEq = genericPred (==)

genericNeq = genericPred (<>)
