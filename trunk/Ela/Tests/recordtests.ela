fromLiteral {eq} =
  let rec' = {lang="Ela", dev="Basil"} in
    eq (length rec') 2
  $ eq (rec':0) "Ela"
  $ eq (rec':1) "Basil"
  $ eq rec'.lang "Ela" 
  $ eq rec'.dev "Basil"
  $ eq (rec':"lang") "Ela"
  $ eq (rec':"dev") "Basil"
    
fromLiteral2 {eq} = 
    eq (rec':"font-color") "red"
  $ eq (rec':"text-decoration") "none"
  where rec' = {"font-color"="red","text-decoration"="none"}

lightRec {eq} = 
  eq {x,y} {x=1,y=2}
  where x = 1
        y = 2

concat {eq} =
  eq r3 {x=1,y=2,z=3}
  where r1 = {x=1,y=2}
        r2 = {z=3}
        r3 = r1++r2

recordAsTuple {eq} =
    eq x 1
  $ eq y 2
  $ eq z 3
  where r = {x=1,y=2,z=3}
        (x,y,z) = r

equals {eq,neq} =
    eq r1 r2
  $ neq r1 r3
  where r1 = {x=1,y="word",z='c'}
        r2 = {x=1,y="word",z='c'}
        r3 = {x=1,y="WORD",z='C'}

typeCheck {eqt} =
  let rec' = {x=0} in
  eqt (match rec' with _ is record = true; _ = false;;)
