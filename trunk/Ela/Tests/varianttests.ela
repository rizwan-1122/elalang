simple {eqt} =
    eqt <| v == Some
  $ eqt <| v2 == Some 2
  $ eqt <| v3 == None
  where v = Some
        v2 = Some 2
        v3 = None

simple2 {eqt} = 
    eqt <| (match v with Some (12, _) = true; _ = false;;)
  $ eqt <| (match v2 with Some (1::x::xs) = true; _ = false;;)
  where v = Some (12, 20)
        v2 = Some [1,2,3]

matchTest {eq} =
  match v with
          Some m = eq m "message"
  where v = Some "message"

nested {eqt} =
  match n with
        Left x = eqt (match x with Right = true; _ = false;;)
        Right _ = eqt false
  where n = Left (Right 12)

caseMatch {eqf,eqt} = 
    eqf (tag n == "Some")
  $ eqt (tag n == "SOme")
  where n = SOme 0

tagTest {eq} =
    eq (tag v) "Some"
  $ eq (tag v2) "Foo"
  $ eq (tag v3) "Bar"
  where v  = Some "message"
        v2 = Foo (1,2,3)
        v3 = Bar

untagTest {eq} = 
    eq (untag v) "message"
  $ eq (untag v2) (1,2,3)
  $ eq (untag v3) ()
  where v  = Some "message"
        v2 = Foo (1,2,3)
        v3 = Bar

identityVariant {eq} =
    eq (toFoo(Foo 12)) (toFoo(Foo 12))
  $ eq (toFoo 12) (toFoo(Foo 12))
  where toFoo (Foo)@x = x
        toFoo x = Foo x

compare {eq,neq} =
    eq v1 v3
  $ neq v1 v7
  $ eq v4 v5
  $ eq v2 v6
  where v1 = Foo 12
        v2 = Foo true
        v3 = Foo 12
        v4 = Foo (& 12)
        v5 = Foo (& 12)
        v6 = Foo (& true)
        v7 = Foo 23

typeCheck {eqt} =
  let vr  = None in
  eqt (match vr with _ is variant = true; _ = false;;)

