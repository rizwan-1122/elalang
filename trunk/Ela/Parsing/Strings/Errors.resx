<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExpectedArgSigma" xml:space="preserve">
    <value>Expected argument sigma '$'.</value>
  </data>
  <data name="ExpectedBooleanToken" xml:space="preserve">
    <value>Expected boolean literal.</value>
  </data>
  <data name="ExpectedCharToken" xml:space="preserve">
    <value>Expected char.</value>
  </data>
  <data name="ExpectedCurlyBrace" xml:space="preserve">
    <value>Expected curly brace '{' or '}'.</value>
  </data>
  <data name="ExpectedEof" xml:space="preserve">
    <value>End of file missing. Probably a semicolon ';' or a curly brace '{' or '}' is missing.</value>
  </data>
  <data name="ExpectedIdentifierToken" xml:space="preserve">
    <value>Expected identifier.</value>
  </data>
  <data name="ExpectedIntToken" xml:space="preserve">
    <value>Expected integer.</value>
  </data>
  <data name="ExpectedKeywordAs" xml:space="preserve">
    <value>Expected keyword 'as'.</value>
  </data>
  <data name="ExpectedKeywordAsync" xml:space="preserve">
    <value>Expected keyword 'async'.</value>
  </data>
  <data name="ExpectedKeywordAt" xml:space="preserve">
    <value>Expected keyword 'at'.</value>
  </data>
  <data name="ExpectedKeywordBase" xml:space="preserve">
    <value>Expected keyword 'base'.</value>
  </data>
  <data name="ExpectedKeywordBreak" xml:space="preserve">
    <value>Expected keyword 'break'.</value>
  </data>
  <data name="ExpectedKeywordCatch" xml:space="preserve">
    <value>Expected keyword 'catch'.</value>
  </data>
  <data name="ExpectedKeywordContinue" xml:space="preserve">
    <value>Expected keyword 'continue'.</value>
  </data>
  <data name="ExpectedKeywordCout" xml:space="preserve">
    <value>Expected keyword 'cout'.</value>
  </data>
  <data name="ExpectedKeywordDo" xml:space="preserve">
    <value>Expected keyword 'do'.</value>
  </data>
  <data name="ExpectedKeywordDownto" xml:space="preserve">
    <value>Expected keyword 'downto'.</value>
  </data>
  <data name="ExpectedKeywordElse" xml:space="preserve">
    <value>A conditional expression (if/else) is missing a required 'else' clause.</value>
  </data>
  <data name="ExpectedKeywordFor" xml:space="preserve">
    <value>Expected keyword 'for'.</value>
  </data>
  <data name="ExpectedKeywordIf" xml:space="preserve">
    <value>Expected keyword 'if'.</value>
  </data>
  <data name="ExpectedKeywordIgnore" xml:space="preserve">
    <value>Expected keyword 'ignore'.</value>
  </data>
  <data name="ExpectedKeywordIn" xml:space="preserve">
    <value>Expected keyword 'in'.</value>
  </data>
  <data name="ExpectedKeywordIs" xml:space="preserve">
    <value>Expected keyword 'is'.</value>
  </data>
  <data name="ExpectedKeywordLazy" xml:space="preserve">
    <value>Expected keyword 'lazy'.</value>
  </data>
  <data name="ExpectedKeywordLet" xml:space="preserve">
    <value>Expected keyword 'let'.</value>
  </data>
  <data name="ExpectedKeywordMatch" xml:space="preserve">
    <value>Expected keyword 'match'.</value>
  </data>
  <data name="ExpectedKeywordOn" xml:space="preserve">
    <value>Invalid match syntax: 'on' operator is required before each match entry.</value>
  </data>
  <data name="ExpectedKeywordOpen" xml:space="preserve">
    <value>Expected keyword 'open'.</value>
  </data>
  <data name="ExpectedKeywordPrivate" xml:space="preserve">
    <value>Expected keyword 'private'.</value>
  </data>
  <data name="ExpectedKeywordReturn" xml:space="preserve">
    <value>Expected keyword 'return'.</value>
  </data>
  <data name="ExpectedKeywordThrow" xml:space="preserve">
    <value>Expected keyword 'throw'.</value>
  </data>
  <data name="ExpectedKeywordTo" xml:space="preserve">
    <value>Expected keyword 'to'.</value>
  </data>
  <data name="ExpectedKeywordTry" xml:space="preserve">
    <value>A try/catch expression is missing a required 'catch' clause.</value>
  </data>
  <data name="ExpectedKeywordTypeof" xml:space="preserve">
    <value>Expected keyword 'typeof'.</value>
  </data>
  <data name="ExpectedKeywordUntil" xml:space="preserve">
    <value>Expected keyword 'until'.</value>
  </data>
  <data name="ExpectedKeywordVar" xml:space="preserve">
    <value>Expected keyword 'var'.</value>
  </data>
  <data name="ExpectedKeywordWhen" xml:space="preserve">
    <value>Expected keyword 'when'.</value>
  </data>
  <data name="ExpectedKeywordWhile" xml:space="preserve">
    <value>Expected keyword 'while'.</value>
  </data>
  <data name="ExpectedKeywordWith" xml:space="preserve">
    <value>Expected keyword 'with'.</value>
  </data>
  <data name="ExpectedKeywordYield" xml:space="preserve">
    <value>Expected keyword 'yield'.</value>
  </data>
  <data name="ExpectedMatchOperator" xml:space="preserve">
    <value>Invalid match entry syntax: a '-&gt;' operator is required after pattern.</value>
  </data>
  <data name="ExpectedOperatorToken" xml:space="preserve">
    <value>A name for an operator is invalid. It should be a unique combination of the following allowed symbols: '!%&amp;*+-.:/&lt;=&gt;?@^|~'.</value>
  </data>
  <data name="ExpectedRealToken" xml:space="preserve">
    <value>Expected floating point number.</value>
  </data>
  <data name="ExpectedSemicolon" xml:space="preserve">
    <value>Expected semicolon ';'.</value>
  </data>
  <data name="ExpectedStringToken" xml:space="preserve">
    <value>Expected string.</value>
  </data>
  <data name="ExpectedToken" xml:space="preserve">
    <value>Invalid syntax. Expected token: {0}.</value>
  </data>
  <data name="ExpectedVariantToken" xml:space="preserve">
    <value>Expected polymorphic variant, e.g. `Foo.</value>
  </data>
  <data name="InvalidAssignment" xml:space="preserve">
    <value>Invalid assignment syntax.</value>
  </data>
  <data name="InvalidBindingPattern" xml:space="preserve">
    <value>Invalid syntax for the let/var binding through pattern matching.</value>
  </data>
  <data name="InvalidBooleanPattern" xml:space="preserve">
    <value>Invalid boolean pattern syntax.</value>
  </data>
  <data name="InvalidDoWhileExpression" xml:space="preserve">
    <value>Invalid syntax for the do/while cycle.</value>
  </data>
  <data name="InvalidEscapeCode" xml:space="preserve">
    <value>Invalid escape sequence in a string at position '{0}'.</value>
  </data>
  <data name="InvalidExpression" xml:space="preserve">
    <value>Invalid expression.</value>
  </data>
  <data name="InvalidForeachPattern" xml:space="preserve">
    <value>Invalid syntax for the pattern matching inside for/in cycle.</value>
  </data>
  <data name="InvalidForExpression" xml:space="preserve">
    <value>Invalid syntax for the 'for' cycle.</value>
  </data>
  <data name="InvalidFunctionDeclaration" xml:space="preserve">
    <value>Invalid function declaration, function name is missing.</value>
  </data>
  <data name="InvalidFunctionExpression" xml:space="preserve">
    <value>Invalid function literal syntax.</value>
  </data>
  <data name="InvalidIncludeExpression" xml:space="preserve">
    <value>Invalid syntax for the module 'include' expression.</value>
  </data>
  <data name="InvalidIntegerSyntax" xml:space="preserve">
    <value>Invalid syntax of integer literal.</value>
  </data>
  <data name="InvalidIsOperatorPattern" xml:space="preserve">
    <value>Invalid syntax for the pattern matching using 'is' operator.</value>
  </data>
  <data name="InvalidIterationExpression" xml:space="preserve">
    <value>Invalid syntax for the iteration expression, e.g. 'for', 'while'.</value>
  </data>
  <data name="InvalidLiteral" xml:space="preserve">
    <value>Invalid syntax for a literal expression.</value>
  </data>
  <data name="InvalidLiteralPattern" xml:space="preserve">
    <value>Invalid primitive literal pattern syntax.</value>
  </data>
  <data name="InvalidPattern" xml:space="preserve">
    <value>Invalid pattern syntax.</value>
  </data>
  <data name="InvalidPrimitiveLiteral" xml:space="preserve">
    <value>Invalid syntax for Ela primitive type literal.</value>
  </data>
  <data name="InvalidProduction" xml:space="preserve">
    <value>Invalid syntax for production '{0}'.</value>
  </data>
  <data name="InvalidRealSyntax" xml:space="preserve">
    <value>Invalid syntax of real literal.</value>
  </data>
  <data name="InvalidRecordFieldDeclaration" xml:space="preserve">
    <value>Invalid record literal. Record declarations should comply to the form 'field: expr' where field is a valid identifier.</value>
  </data>
  <data name="InvalidRootExpression" xml:space="preserve">
    <value>Invalid syntax.</value>
  </data>
  <data name="InvalidSyntax" xml:space="preserve">
    <value>Invalid syntax.</value>
  </data>
  <data name="InvalidTryCatchExpression" xml:space="preserve">
    <value>Invalid syntax for the try/catch expression.</value>
  </data>
  <data name="InvalidUnaryExpression" xml:space="preserve">
    <value>Invalid unary expression.</value>
  </data>
  <data name="InvalidUnaryOperator" xml:space="preserve">
    <value>Invalid unary operator.</value>
  </data>
  <data name="InvalidVariableDeclaration" xml:space="preserve">
    <value>Invalid variable declaration syntax.</value>
  </data>
  <data name="InvalidWhenExpression" xml:space="preserve">
    <value>Invalid syntax for the 'when' expression.</value>
  </data>
  <data name="InvalidWhileExpression" xml:space="preserve">
    <value>Invalid syntax for the 'while' cycle.</value>
  </data>
  <data name="ShortMatchWithoutParams" xml:space="preserve">
    <value>Unable to use a short declaration of 'match' expression as a body for a function with no parameters.</value>
  </data>
  <data name="UnknownConversionType" xml:space="preserve">
    <value>Unknown type '{0}'. An expression should be one of the standard Ela types.</value>
  </data>
  <data name="ExpectedLambda" xml:space="preserve">
    <value>Expected lambda operator '\'.</value>
  </data>
  <data name="ShortMatchInvalidParamList" xml:space="preserve">
    <value>Unable to use short syntax for 'match' expression inside a function when a parameter list is already presented as match patterns.</value>
  </data>
</root>