<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CallFailed" xml:space="preserve">
    <value>An unexpected error occured during function call: {0}</value>
  </data>
  <data name="CallWithNoParams" xml:space="preserve">
    <value>Unable to call a function that accepts {0} parameters with an empty argument list.</value>
  </data>
  <data name="ConversionFailed" xml:space="preserve">
    <value>Conversion of value '{0}' of type '{1}' to type '{2}' failed because of the following reason: {3}.</value>
  </data>
  <data name="DivideByZero" xml:space="preserve">
    <value>Division by zero of value '{0}' of type '{1}'.</value>
  </data>
  <data name="ExpectedFunction" xml:space="preserve">
    <value>A functional type is expected, got '{0}'.</value>
  </data>
  <data name="IndexOutOfRange" xml:space="preserve">
    <value>Index '{0}' of type '{1}' was out of range on object '{2}' of type '{3}'.</value>
  </data>
  <data name="InvalidFormat" xml:space="preserve">
    <value>Format '{0}' for the value '{1}' of type '{2}' is invalid or not supported.</value>
  </data>
  <data name="InvalidIndexType" xml:space="preserve">
    <value>Indices of type '{0}' are not supported.</value>
  </data>
  <data name="InvalidParameterType" xml:space="preserve">
    <value>Invalid type for the function parameter. Expected '{0}', got '{1}'.</value>
  </data>
  <data name="InvalidType" xml:space="preserve">
    <value>Invalid type. Expected: '{0}', got: '{1}'.</value>
  </data>
  <data name="LeftOperand" xml:space="preserve">
    <value>The value '{0}' of type '{1}' is not a valid left operand for the value '{2}' of type '{3}' in an operation defined in trait '{4}'.</value>
  </data>
  <data name="MatchFailed" xml:space="preserve">
    <value>Match failed. None of the patterns were successful.</value>
  </data>
  <data name="OperationNotSupported" xml:space="preserve">
    <value>This operation is not supported by the object of type '{0}'.</value>
  </data>
  <data name="PrivateVariable" xml:space="preserve">
    <value>The name '{0}' is declared as private and cannot be referenced.</value>
  </data>
  <data name="RightOperand" xml:space="preserve">
    <value>The value '{0}' of type '{1}' is not a valid right operand for the value '{2}' of type '{3}' in an operation defined in trait '{4}'.</value>
  </data>
  <data name="TooFewParams" xml:space="preserve">
    <value>Partial application of a function is not supported. Function is called from external context (e.g. Ela function from .NET code).</value>
  </data>
  <data name="TooManyParams" xml:space="preserve">
    <value>Too many parameters specified in a function call.</value>
  </data>
  <data name="TraitBit" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Bit' (bitwise operations).</value>
  </data>
  <data name="TraitBool" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Bool' (boolean operations).</value>
  </data>
  <data name="TraitBound" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Bound' (doesn't have a maximum or minimum value notion).</value>
  </data>
  <data name="TraitCall" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Call' (function call operation).</value>
  </data>
  <data name="TraitConcat" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Concat' (concatenation operation).</value>
  </data>
  <data name="TraitCons" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Cons' (construction operation).</value>
  </data>
  <data name="TraitCont" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Cont' (operations on mutable container).</value>
  </data>
  <data name="TraitConvert" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Convert' (it cannot be converted to other types).</value>
  </data>
  <data name="TraitEnum" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Enum' (definition of successor and predecessor).</value>
  </data>
  <data name="TraitEq" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Eq' (equality comparison).</value>
  </data>
  <data name="TraitFieldGet" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'FieldGet' (read field operation).</value>
  </data>
  <data name="TraitFieldSet" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'FieldGet' (write field operation).</value>
  </data>
  <data name="TraitFold" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Fold' (head, tail and nil operations).</value>
  </data>
  <data name="TraitGet" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Get' (read through indexer).</value>
  </data>
  <data name="TraitInsert" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Insert' (insert operation).</value>
  </data>
  <data name="TraitIter" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Iter' (can't create an iterator).</value>
  </data>
  <data name="TraitLen" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Len' (calculation of 'length').</value>
  </data>
  <data name="TraitNeg" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Neg' (negation operation).</value>
  </data>
  <data name="TraitNum" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Num' (basic arithmetic operations).</value>
  </data>
  <data name="TraitOrd" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Ord' (comparison operations).</value>
  </data>
  <data name="TraitSet" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Set' (write through indexer).</value>
  </data>
  <data name="TraitShow" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Show' (cannot be represented as a string).</value>
  </data>
  <data name="TraitTag" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Tag' (it cannot be tagged and used a polymorphic variant).</value>
  </data>
  <data name="TraitThunk" xml:space="preserve">
    <value>A value '{0}' of type '{1}' doesn't support trait 'Thunk' (is not a 'lazy' or a similar type and cannot be 'forced').</value>
  </data>
  <data name="TuplesLength" xml:space="preserve">
    <value>The length of two tuples '{0}' and '{1}' should be equal to support some operations (such as comparison).</value>
  </data>
  <data name="UndefinedArgument" xml:space="preserve">
    <value>An argument with the name '{0}' is undefined.</value>
  </data>
  <data name="UndefinedVariable" xml:space="preserve">
    <value>A name '{0}' is not defined in the module '{1}'.</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>An unknown runtime error has occured. Error details: {0}.</value>
  </data>
  <data name="UnknownField" xml:space="preserve">
    <value>There is no such field as '{0}' in the object '{1}' of type '{2}'.</value>
  </data>
  <data name="UnknownParameterType" xml:space="preserve">
    <value>Invalid type for the function parameter: '{0}'.</value>
  </data>
  <data name="UnknownPervasive" xml:space="preserve">
    <value>A reference to the unknown name or operator.</value>
  </data>
  <data name="UserCode" xml:space="preserve">
    <value>An error in user code occured.</value>
  </data>
</root>