<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CallFailed" xml:space="preserve">
    <value>An unexpected error occured during function call: {0}</value>
  </data>
  <data name="CallWithNoParams" xml:space="preserve">
    <value>Unable to call a function that accepts {0} parameters with an empty argument list.</value>
  </data>
  <data name="ConversionFailed" xml:space="preserve">
    <value>Conversion from '{0}' to '{1}' failed because of the following reason: {2}.</value>
  </data>
  <data name="DivideByZero" xml:space="preserve">
    <value>Division by zero.</value>
  </data>
  <data name="ExternalCallFailed" xml:space="preserve">
    <value>An unexpected error occured during external function call: {0}</value>
  </data>
  <data name="IndexOutOfRange" xml:space="preserve">
    <value>Index was out of range.</value>
  </data>
  <data name="InvalidBinaryOperation" xml:space="preserve">
    <value>Unable to perform operation '{0}' on types '{1}' and '{2}'.</value>
  </data>
  <data name="InvalidParameterType" xml:space="preserve">
    <value>Invalid type for the function parameter. Expected '{0}', got '{1}'.</value>
  </data>
  <data name="InvalidType" xml:space="preserve">
    <value>Invalid type. Expected: '{0}', got: '{1}'.</value>
  </data>
  <data name="InvalidUnaryOperation" xml:space="preserve">
    <value>Unable to perform operation '{0}' on type '{1}'.</value>
  </data>
  <data name="MatchFailed" xml:space="preserve">
    <value>Match failed. None of the patterns were successful.</value>
  </data>
  <data name="NotFunction" xml:space="preserve">
    <value>Value is not a function.</value>
  </data>
  <data name="OperationNotSupported" xml:space="preserve">
    <value>This operation is not supported by the object of type '{0}'.</value>
  </data>
  <data name="PrivateVariable" xml:space="preserve">
    <value>The name '{0}' is declared as private and cannot be referenced.</value>
  </data>
  <data name="TooFewParams" xml:space="preserve">
    <value>Not all of the parameters are specified in a function call. Currying functions is not supported when calling Ela functions from external context.</value>
  </data>
  <data name="TooManyParams" xml:space="preserve">
    <value>Too many parameters specified in a function call.</value>
  </data>
  <data name="UnableCallAsFunction" xml:space="preserve">
    <value>Unable to call a specified value as a function. Invalid function handle.</value>
  </data>
  <data name="UnableConvert" xml:space="preserve">
    <value>Unable to convert type '{0}' to '{1}'.</value>
  </data>
  <data name="UndefinedArgument" xml:space="preserve">
    <value>An argument with the name '{0}' is undefined.</value>
  </data>
  <data name="UndefinedVariable" xml:space="preserve">
    <value>A name '{0} is not defined in the target module.</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>An unknown runtime error has occured. Error details: {0}.</value>
  </data>
  <data name="UnknownField" xml:space="preserve">
    <value>There is no such mutable field as '{0}' in the target object.</value>
  </data>
  <data name="UnknownParameterType" xml:space="preserve">
    <value>Invalid type for the function parameter: '{0}'.</value>
  </data>
  <data name="UnknownPervasive" xml:space="preserve">
    <value>A reference to the unknown name '{0}'.</value>
  </data>
</root>