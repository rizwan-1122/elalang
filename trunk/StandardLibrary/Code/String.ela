open Collection[elalib] with 
	toList = arrayToList;

open String[elalib]	with 
	format,
	upper,
	lower,
	indexOf,
	indexOfFrom,
	lastIndexOf,
	indexOfAny,
	indexOfAnyFrom,
	trim,
	trimStart,
	trimEnd,
	trimChars,
	trimStartChars,
	trimEndChars,
	startsWith,
	endsWith,
	replace,
	remove,
	split,
	splitToList,
	substr,
	insert,
	padRight,
	padLeft;

/* returns an empty string */
let empty = "";

/* returns true if a given string is empty */
let isEmpty(str) str == empty;

/* returns a length of the given string */
let length(str) str.length;

/* returns `Some(x) where x is a char at a specified index if a given index is less
	than the size of the string, otherwise - returns `None */
let charAt(str, index) if (str.length > index) `Some(str[index]) else `None;

/* returns `Some(x) where x is a first char of the string if a string is not empty, 
	otherwise - returns `None */
let first(str) if (str.length > 0) `Some(str[0]) else `None;

/* returns `Some(x) where x is a last char of the string if a string is not empty, 
	otherwise - returns `None */
let last(str) if (str.length > 0) `Some(str[str.length - 1]) else `None;

/* convests a given string to a sequence of chars */
let toSeq(str) str :> seq;

/* determines if a given string contains an instance of another */
let contains(str, cs) indexOf(str, cs) != -1;

/* reverses a given string */
let reverse(str) match (last(str))
	on `Some(s) when (str.length > 1) -> s + reverse(substr(str, 0, str.length - 1))
	on `Some(s) -> s
	on `None -> "";