let +: x y = x:string ++ y:string

let assert =
	{
		eq  = op' "eq"  (==),
		neq = op' "neq" (<>),
		gt  = op' "gt"  (>),
		lt  = op' "lt"  (<),
		gte = op' "gte" (>=),
		lte = op' "lte" (<=),
		eqt = op' "eqt" (==) true,
		eqf = op' "eqf" (==) false
	}
    where op' m op x y | op x y = ();
                       | else   = raise AssertFailed (m)
    end
    
let funData fun = (funName fun, fun)
                  where funName f = t.module.name ++ "." ++ t.name
                                    where t = type f end
                  end
    
let regFun fun lst = fd :: lst
                     where fd = funData fun end
	
let regFuns mod lst = each' funData (?function) vals
                      where vals = [ v.value @ v <- (type mod).globals ] and
                            each' f p x::xs | p x  = f x :: each' f p xs;
                                            | else = each' f p xs;
                                  _ _ []           = lst
                      end

let run lst = (res, failed)
        where exec (n, f) = try (f assert $ n, true, "") with 
                            `AssertFailed m = (n, false, ": Assert failed: " ++ m);
                            `             m = (n, false, ": Error occured: " ++ m) 
                            end and
              run' x::xs = exec x :: run' xs;
                   []    = [] and
              count f i x::xs | f x  = count f (i + 1) xs;
                              | else = count f i xs;
                    f i []           = i and
              res = run' lst and
              failed = count (\(_,y,_) -> not y) 0 res
        end
	
let fmt prf (tests, failed) =
	let tag' true = "Success "; false = "FAILED " and
        fmt' i (n, r, m) = i +: ". " +: n +: ": " +: (tag' r) +: " " +: m and
        all' x::xs i = prf <| fmt' i x $ all' xs (i + 1);
             [] i    = prf ""
	in prf "Test session started" 
    $ all' tests 1
    $ prf "Test session finished"
    $ prf ("Executed tests: " +: (length tests))
    $ prf ("Successful tests: " +: (length tests - failed))
    $ prf ("Failed tests: " +: failed)