let iter ?(Get,Len,Ix)@arr = iter' {mutable ix=0} arr
        where iter' cell arr () | n < len = cell.ix <- cell.ix + 1 $ `Some (arr.[n]);
                                | else    = `None
                                where n   = cell.ix and
                                      len = length arr
                                end
        end;
         ?(Fold)@xs        = iter' {mutable xs=xs}
        where iter' cell () | l is (x::xs) = cell.xs <- xs $ `Some x;
                            | else         = `None
                            where l = cell.xs end
        end;
        x                  = fail "iter: not supported: " ++ (show x)
end

let each f xs = for' (iter xs)
               where for' it | r is (`Some x) = f x $ for' it;
                             | else           = ()
                             where r = it () end
               end
end

let when p it | r is (`Some x), p x = `Some x;
              | r is (`Some)        = when p it;
              | r is (`None)        = `None
              where r = it () end
end

let project f it = f <| it () end