<?xml-stylesheet type="text/xsl" href="Template.xsl"?>
<article title="Comprehensions">

  <section level="1" title="Introduction" />
  This article discusses comprehensions in Ela.
  
  <section level="1" title="Overview" />
  Ela supports list comprehensions in Haskell style (with slightly altered syntax). Comprehensions can be used to produce both strict and lazy lists.
  <section level="1" title="Strict Comprehensions" />
  Comprehension consists of three parts – a value to select, an expression that actually fetches a value and an optional condition (guard clause). Let's say that we have a range [1..10] and 
  we need to select all even integers from it, multiply each element by two and compile a new list with the result:
  <code>[x * 2 \\ x &lt;- [1..10] | x % 2 == 0]</code>
 Guard clause is not mandatory and can be omitted:
 <code>[x * 2 \\ x &lt;- [1..10]]</code>
 You can also use multiple guards like so:
 <code>[x * 2 \\ x &lt;- [1..10] | x % 2 == 0 | x &gt; 5]</code>
 The code above is fully equivalent to:
 <code>[x * 2 \\ x &lt;- [1..10] | x % 2 == 0 or x &gt; 5]</code>
 You can generate a list based on several inputs like so:
 <code>[x * y \\ x &lt;- [10,9..1], y &lt;- [1..10] | x % 2 == 0 and x > 5]</code>
 Guards can be attached to each selector in comprehension. You can also use pattern matching in selectors and reference names declared in preceding selectors:
 <code>[x * y \\ x &lt;- [10,9..1] | x % 2 == 0, y &lt;- [x..10] | y > 5]</code>
  
<section level="1" title="Lazy Comprehensions" />
Comprehensions can be used to generate lazy lists. In this case a comprehension should start with an ampresand character (<key>&amp;</key>):
<code>[&amp; x \\ x &lt;- [1..]]</code>
Lazy comprehensions support the same features as strict comprehensions.
</article>