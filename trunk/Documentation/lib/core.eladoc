#file core.ela
#title core
#category Ela Standard Library
This module contains implementations of some commonly used algebraic types, their instances and functions
that operate on them.

#members

option
This type is used to represent an optional value. A value of type option either contains a value `a` (represented
as `Some a`), or is empty (represented as `Nothing`).//br
Using option is a good way to way to deal with errors without using exceptions.

Eq option
Implements equality functions for an option data type.

Show option
Implements `showf` function for an option data type.
>>>show (Some 12)

ordering
This type can be used by comparison functions to specify if two values are equal (represented through `EQ` case), one value 
is lesser than another (represented through `LT` case) or one value is greater than another (represented through `GT` case).
A typical example of a function that returns a value of type ordering is `compare`.

Eq ordering
Implements equality functions for an ordering data type.

Show ordering
Implements `showf` function for an ordering data type.
>>>show EQ

either
This type is used to represent two possibilities - either `Left` or `Right`. Normally a `Left` constructor is used to hold
an error value, and `Right` constructor is used to hold a correct value.

Eq either
Implements equality functions for an either data type.

Show either
Implements `showf` function for an either data type.
>>>show (Left 42)

maybe d f o
This function takes a default value, a function, and an option value. If the option value is `None`, the function returns 
the default value. Otherwise, it applies the function to the value inside the `Some` and returns the result.

isSome o
Checks if a given value is an option, created using `Some` constructor.

fromSome o
Unpacks a given value of type option, created using `Some` constructor.
>>>fromSome (Some 12)

fromOption
This function takes a default value and an option. If the option is 'Nothing', it returns the default value; otherwise, it 
returns the value contained in the option.
>>>fromOption 32 None

takeEither f1 f2 v
If the value `v` is `Left a`, apply the first function to `a`; if it is `Right a`, apply the second function to `a`.

lefts xs
Extracts all `Left` elements from a given list in order.

rights xs
Extracts all `Right` elements from a given list in order.

fromLeft x
Upacks a given value of type either, created using `Left` constructor.
>>>fromLeft (Left 'a')

fromRight x
Upacks a given value of type either, created using `Right` constructor.
>>>fromRight (Right 'b')

compare
Compares two given values and returns `EQ` if they are equal, `LT` if first argument is lesser than the second argument 
and `GT` if first argument is greater than the second argument:
>>>compare 12 34

maxValue
Returns `x` if `x` is greater or equal to `y`, otherwise returns y. 

minValue
Returns `x` if `x` is lesser or equal to `y`, otherwise returns `y`. 

