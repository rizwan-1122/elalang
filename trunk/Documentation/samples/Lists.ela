//Here we use console output for testing purposes
//Module Con contains implementations of basic console functions such as
//writen (write line), write (write), readn (read line)
open Con

//Lists can be constructed using cons (::) operator. This operator is right associative
//and the rightmost argument should be an empty (nil) list
let list1 = 1::2::3::[]

let _ = writen list1 //A handy thing is that list is automatically serialized to string

//A more readable way to construct lists is to use a list literal
let list2 = [1,2,3]

let _ = writen list2 //The result is the same

//Lists in Ela are immutable and are always compared using structured equality
//We have constructed two different lists - list1 and list2 - however they have the same
//elements and therefore they are equal.
let _ = writen ("The lists are equal? " ++ (list1 == list2))

//One can construct lists using ranges
let list3 = [1..10]

let _ = writen list3 //Here we have a list of integers from 1 to 10

//If you specify a second element in range than a range will automatically
//calculate the rest elements
let list4 = [1,3..10]

let _ = writen list4 //Prints [1,3,5,7,9]

//Lists are immutable, therefore you can't change lists in place. In order to add an
//element to the head of the list you can use a (::) operator, in order to add an 
//element to the end of the list you can use a concatenation operator (++), however
//this is a pretty costy operation
let list5 = 0 :: list4  //Creates a new list
let list6 = list4 ++ [10] //Creates a new list

let _ = writen list5 //Prints [0,1,3,5,7,9]
let _ = writen list6 //Prints [1,3,5,7,9,10]

//Lists can be deconstructed using pattern matching, head/tail pattern. Head is the first
//element in a list, tail is the rest of the list without the first element.
let (x::xs) = list6

let _ = writen ("x=" ++ x) //Prints x=1
let _ = writen ("xs=" ++ xs) //Prints xs=[3,5,7,9,10]

//It is very easy to write functions that analyze lists using recursion with the help of 
//head/tail pattern. Here we have a function that calculates a length of a given list.
let listLength xs = len 0 xs
                    where len n [] = n
                          len n (x::xs) = len (n+1) xs

let _ = writen ("listLength=" ++ listLength xs) //Prints listLength=5

//Of course there is a standard length function that you can use to measure the length of lists:
let _ = writen ("length=" ++ length xs) //Prints length=5