<?xml version="1.0" encoding="UTF-8" ?>
<ARTICLE>
  <TITLE>Проект Ela</TITLE>
  <KEYWORDS>языки программирования; функциональное программирование; .NET</KEYWORDS>
  <ABSTRACT>Описание проекта, посвященного разработке языка программирования Ela.</ABSTRACT>
  <AUTHOR e-mail="адрес" rsdn-profile="16070" phone="(код города) телефон" address="почтовый адрес" place-of-employment="Сокращенное название места работы в именительном падеже" job="Название должности" place-of-study="наименование учебного заведения в именительном падеже" scientific-degree="сокращенное название" scientific-rank="звание" href="http://www.rsdn.ru/Users/16070.aspx">Воронков Василий Владимирович</AUTHOR>
  <DATE>03.06.2010</DATE>
  <VERSION>1.0</VERSION>
  <METADATA-EN>
    <KEYWORDS>programming languages; .NET; functional programming</KEYWORDS>
    <ABSTRACT>Description of a project devoted to the development of Ela programming language.</ABSTRACT>
    <AUTHOR e-mail="address" rsdn-profile="16070" phone="phone" address="postal address" place-of-employment="Company name" job="Job position" place-of-study="place of study" scientific-degree="academic degree" scientific-rank="academic rank" href="http://www.rsdn.ru/Users/16070.aspx">Basil Voronkov</AUTHOR>
    <DATE>03.06.2010</DATE>
    <VERSION>1.0</VERSION>
    <TITLE>Ela Project</TITLE>
  </METADATA-EN>
  <CONTENTS />
  <LITERATURE />
  <PART>
    <HEADER>Что?</HEADER>
    <P>Ela является функциональным языком программирования – поддерживает функции как первоклассные объекты, концепцию неизменяемых структур данных и переменных, а так же специальные конструкции вроде паттерн-матчинга, упрощающие написание кода в декларативном ключе. В Ela есть списки, генераторы, полиморфные варианты, отложенные (или ленивые) вычисления и поддержка асинхронного программирования через реальные потоки. Также, что немаловажно, все конструкции языка являются выражениями, т.е. могут потенциально возвращать значение. Поэтому, к примеру, такой код является полностью корректным:</P>
    <CODE><KEYWORD>var</KEYWORD> x = <KEYWORD>if</KEYWORD> (<KEYWORD>true</KEYWORD>) 1 <KEYWORD>else</KEYWORD> 2;
  </CODE>
    <P>И даже такой:</P>
    <CODE><KEYWORD>var</KEYWORD> x = {
  <KEYWORD>var</KEYWORD> accum = 0;

  <KEYWORD>for</KEYWORD> (x <KEYWORD>to</KEYWORD> 10)
    accum += x;
    
  accum;
}</CODE>
    <P>В этом случае значением переменной «x» будет последнее выражение в блоке, т.е. значение переменной «accum».</P>
    <P>Будучи языком с С-подобным синтаксисом, Ela поддерживает лексические блоки для переменных на манер С/C++ с затенением переменных из родительского блока (что хорошо видно из предыдущего примера, где переменная «x», используемая в цикле «for», затеняет родительскую переменную «x»). Это поведение, к примеру, отличается от C#, где затенение переменных в лексических блоках недопустимо.</P>
    <P>Ela также является и императивным языком. В Ela допускаются побочные эффекты, есть возможность объявления изменяемых переменных, поддерживаются циклы с операторами break, continue и return, а также другие императивные конструкции. </P>
    <P>Но Ela еще и язык с динамической типизацией, а это означает, что информация о типе в Ela связывается не с переменной, а со значением этой переменной. Фактически, так как переменные не несут в себе никакой информации о типе, то код вида «x + y» представляет собой операцию не над типами данных, а над именами, и поэтому нам становится известно, какого рода операцию следует выполнить – сложение целых, конкатенацию строк или же и вовсе объединение списков – уже только на этапе исполнения. Однако, в отличие от таких языков как JavaScript и PHP, Ela является строго типизированным языком, т.е. если вы попробуете вычесть из строки целое, сложить список и массив или же совершить любую другую подобную операцию, то получите ошибку времени исполнения.</P>
    <P>Ela не поддерживает напрямую объектно-ориентированное программирование, в языке нет возможности описать свой собственный тип (класс), как нет и концепции прототипов, знакомой многим программистам по JavaScript, однако модули (которыми являются исполнимые файлы) являются в Ela первоклассными объектами, поддерживается так же и утиная типизация, поэтому многие сценарии и паттерны объектно-ориентированного программирования могут быть реализованы и в Ela.</P>
    <P>Вот несколько примеров кода на Ela, дающих некоторое представление о языке.</P>
    <P>Реализация быстрой сортировки списка на функциональный манер:</P>
    <CODE><KEYWORD>let</KEYWORD> quickSort(list)
  <KEYWORD>on</KEYWORD> x::xs -&gt; quickSort([<KEYWORD>for</KEYWORD> (y <KEYWORD>when</KEYWORD> y &lt; x <KEYWORD>in</KEYWORD> xs) y]) + 
        [x] + 
        quickSort([<KEYWORD>for</KEYWORD> (y <KEYWORD>when</KEYWORD> y &gt;= x <KEYWORD>in</KEYWORD> xs) y])
  <KEYWORD>on</KEYWORD> [] -&gt; [];</CODE>
    <P>Классическая императивная реализация quick sort для массива по алгоритму Хоара:</P>
    <CODE><KEYWORD>let</KEYWORD> quickSort(item, left, right)
{
  <KEYWORD>var</KEYWORD> i = left;
  <KEYWORD>var</KEYWORD> j = right;
  <KEYWORD>var</KEYWORD> center = item[(left + right) / 2];
  <KEYWORD>var</KEYWORD> x = ();
  
  <KEYWORD>while</KEYWORD> (i &lt;= j)
  {
    <KEYWORD>while</KEYWORD> (item[i] &lt; center &amp;&amp; i &lt; right)
      i++;
    <KEYWORD>while</KEYWORD> (item[j] &gt; center &amp;&amp; j &gt; left)
      j--;

    <KEYWORD>when</KEYWORD> (i &lt;= j) {
      x = item[i];
      item[i] = item[j];
      item[j] = x;
      i++;
      j--;
    }
  } 
  
  <KEYWORD>when</KEYWORD> (left &lt; j)
    quickSort(item, left, j);
  
  <KEYWORD>when</KEYWORD> (right &gt; i)
    quickSort(item, i, right);
}</CODE>
  </PART>
  <PART>
    <HEADER>Как?</HEADER>
    <P>Ela полностью реализована на языке C# 3.0 и может работать под управлением .NET Framework версий 3.5 и 4.0, а также под Mono 2.0. Ela на текущий момент является интерпретируемым языком – компиляция исходного кода на Ela происходит в промежуточный байт-код (Ela Intermediate Language, или EIL), инструкции которого были разработаны специально для Ela, и исполняется на своей виртуальной машине, реализованной в виде стек-машины. </P>
    <P>По скорости исполнения кода Ela не является ни самым быстрым, ни самым медленным интерпретируемым языком. К примеру, скорость кода на Ela имеет склонность быть ниже, чем код на CPython 2.6, но в то же время быстрее Ruby 1.8 и JScript (реализации ECMAScript, которая используется в браузере Internet Explorer). </P>
    <P>Весь язык реализован в виде отдельной динамической библиотеки Ela.dll, размер которой на текущий момент составляет менее 200 килобайт. Данная библиотека не требует регистрации и не имеет никаких внешних зависимостей. Небезопасный (unsafe) код при разработке Ela не использовался.</P>
  </PART>
  <PART>
    <HEADER>Зачем?</HEADER>
    <P>Зачем нужен еще один язык программирования?</P>
    <P>Начнем с того, что если вы ведете разработку с использованием .NET Framework и вам требуется встраиваемый скриптовый язык, то ваш выбор будет весьма ограничен. Вы можете использовать какие-либо популярные языков вроде Lua, однако в таком случае ваше приложение получит зависимости от «native» библиотек и потеряет кроссплатформенность. Можно использовать JScript.NET – язык с весьма сомнительным дизайном и туманным будущим. Или же поискать какие-либо альтернативы, разработанные специально для .NET, однако мне не попадалось ничего, что могло бы удовлетворить мои потребности.</P>
    <P>Ela же может быть с легкостью использована как встраиваемый язык программирования – в тех случаях, когда часть логики программы должна модифицироваться на лету. Архитектура Ela разрабатывалась с учетом таких сценариев использования, интерпретатор обладает достаточной производительностью, собирается в конфигурации AnyCPU и может работать как под Windows, так и под Unix системами, к тому же обладает простым и понятным «интерфейсом», с помощью которого его можно подключить к вашему проекту. </P>
    <P>К примеру, следующий код на C# добавляет к типу System.String метод Eval, позволяющий интерпретировать выражения и передавать в них параметры:</P>
    <CODE><KEYWORD>internal</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>class</KEYWORD> StringExtensions
{
  <KEYWORD>public</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>object</KEYWORD> Eval&lt;T&gt;(<KEYWORD>this</KEYWORD> <KEYWORD>string</KEYWORD> @<KEYWORD>this</KEYWORD>, T args)
  {
    <KEYWORD>var</KEYWORD> linker = <KEYWORD>new</KEYWORD> ElaIncrementalLinker(
      <KEYWORD>new</KEYWORD> LinkerOptions(), CompilerOptions.Default);
    linker.SetSource(@<KEYWORD>this</KEYWORD>);
    <KEYWORD>var</KEYWORD> res = linker.Build();

    <KEYWORD>if</KEYWORD> (res.Success) {
      <KEYWORD>var</KEYWORD> asm = res.Assembly;

      <KEYWORD>foreach</KEYWORD> (<KEYWORD>var</KEYWORD> p <KEYWORD>in</KEYWORD> <KEYWORD>typeof</KEYWORD>(T).GetProperties())
        asm.AddArgument(p.Name, p.GetValue(args, <KEYWORD>null</KEYWORD>));

      <KEYWORD>var</KEYWORD> vm = <KEYWORD>new</KEYWORD> ElaMachine(asm);
      <KEYWORD>return</KEYWORD> vm.Run().ReturnValue.ToObject();
    }
    <KEYWORD>else</KEYWORD>
      <KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD>;
  }
}</CODE>
    <P>Использовать данный метод расширения можно так:</P>
    <CODE>
      <KEYWORD>var</KEYWORD> res = <STRING>"$x + $y"</STRING>.Eval(<KEYWORD>new</KEYWORD> { x = 2, y = 1 });</CODE>
    <P>(С помощью сигмы «$» префиксируются все параметры, т.е. значения, которые передаются извне).</P>
    <P>Более того, модули для Ela можно писать как на Ela, так и на любом .NET-языке, что позволяет легко добавить в Ela проблемноориентированные расширения. Ela также поддерживает пользовательские операторы на манер F#, с помощью которых вы можете расширить синтаксис языка.</P>
    <P>Ela вполне может подойти и на роль самостоятельного скриптового языка – и использоваться в целях автоматизации или администрирования. Код на Ela благодаря динамической природе языка и функциональным возможностям является весьма лаконичным, и вы можете значительно сократить время, наобходимое для разработки.</P>
    <P>Наконец Ela – неплохой выбор, если вы хотите изучить функциональное программирование, имея большой опыт программирования на динамических языках. В Ela используется простая интуитивно-понятная система типов, здесь вы будете чувствовать себя «как дома» и сможете постепенно осваивать функциональные возможности.</P>
  </PART>
  <PART>
    <HEADER>Текущее состояние проекта</HEADER>
    <P>На настоящий момент проект включает в себя реализацию языка Ela, представленную в виде независимой библиотеки, а также утилиту командной строки Ela Console, которая может быть использована для запуска файлов Ela на исполнение, для их компиляции в объектные файлы и также работает в интерактивном режиме. </P>
    <P>Сам язык программирования находится в стадии ранней альфа-версии. Реализован основной задуманный функционал, однако ряд запланированных возможностей все еще пребывают в стадии дизайна и разработки. Вы можете повлиять на язык и его развитие, оставляя свои комментарии и замечания на форуме.</P>
    <P>Документация по языку Ela находится в процессе разработки.</P>
    <P />
  </PART>
</ARTICLE>