COMPILER Eil

CHARACTERS
	cr = '\r'.
	lf = '\n'.
	newLine = cr + lf.
	tab = '\t'.    
	letter = 'A' .. 'Z' + 'a' .. 'z' + '_'.
	digit = "0123456789".
	notDigit = ANY - digit.
	hexDigit = digit + "ABCDEFabcdef".
	verbatimChar = ANY.
	stringChar = ANY - '"' - '\\' - newLine.
	char = ANY - "'" - '\\' - newLine.
	op = "!%&+-/.,:<=>?*@^|$~`\\".
	parens = "[]{}()".
	cmt = ANY - newLine.

TOKENS
    ident = letter { letter | digit | "'" }
			| "_" ("'"|letter) { letter | digit | "'" }
			| "'" letter [ (letter|digit|"'") {letter|digit|"'"} (letter|digit) ]
			| "$" digit.
	
	intTok = ["-"]( digit { digit } | digit { digit } CONTEXT ("." notDigit) | 
			( "0x" | "0X" ) hexDigit { hexDigit } ) [ "L" | "l" ].
			
    address = "#" ( digit { digit } | digit { digit } CONTEXT ("." notDigit) | 
			( "0x" | "0X" ) hexDigit { hexDigit } ) [ "L" | "l" ].
						
	stringTok = "\"" { stringChar
					| "\\\"" | "\\\\" | "\\0" | "\\b" | "\\n" | "\\r" | "\\t" | "\\'"
					| "\\u" hexDigit hexDigit hexDigit hexDigit
					}  
				"\"".				
				
	operatorTok = op { op }.
	
	parenTok = parens { parens }.
	
	NL = newLine.
	
IGNORE tab

PRODUCTIONS
	SingleLineComment = 
		"//"  (. var pos = t.pos; .) { ANY } (NL|EOF)
		(. Add(pos, t.pos - pos + t.val.Length, TextStyle.Style4); .).
						
	OpNum = 
	    (
	        "[" (. Add(t.pos, t.val.Length, TextStyle.Style7); .)
	            intTok 
	            (. Add(t.pos, t.val.Length, TextStyle.Style7); .)
	        "]" (. Add(t.pos, t.val.Length, TextStyle.Style7); .)
	    ).
		
	Keyword = 
		( "Nop" |"Len" |"Pushunit" |"Pushelem" |"PushI4_0" |"PushI1_0" |"PushI1_1" |"Pop" |"Popelem" |"Pushstr_0" |"Reccons" |"Genfin" |"Cons" |"Gen" |"Tail" |"Head" |"Ret" |"Concat" |"Add" |"Mul" |"Div" |"Rem" |"Pow" |"Sub" |"Shr" |"Shl" |"Ceq" |"Cneq" |"Clt" |"Cgt" |"Cgteq" |"Clteq" |"AndBw" |"OrBw" |"Xor" |"Not" |"Neg" |"NotBw" |"Dup" |"Swap" |"Newlazy" |"Newlist" |"Newmod" |"Newtup_2" |"Typeid" |"Stop" |"NewI8" |"NewR8" |"Leave" |"Flip" |"LazyCall" |"Call" |"Callt" |"Throw" |"Rethrow" |"Force" |"Type" |"Isnil" |"Succ" |"Pred" |"Max" |"Min" |"Show" |"Untag" |"Skiphtag" |"Nil" |"Gettag" |"Conv" |"Pushext" |"Elem" |"Skiptag" |"Newvar" |"Newrec" |"Newtup" |"Skiptn" |"Skiptl" |"Pat" |"Tupex" |"Failwith" |"Start" |"Pushstr" |"PushCh" |"PushI4" |"PushR4" |"Pushvar" |"Pushfld" |"Popvar" |"Popfld" |"Runmod" |"Has" |"Br" |"Brtrue" |"Brfalse" |"Br_lt" |"Br_gt" |"Br_eq" |"Br_neq" |"Brnil" |"Newfun"
	    )
		(. Add(t.pos, t.val.Length, TextStyle.Style2); .).		
		
	Value = 
	    (
	        ident (. Add(t.pos, t.val.Length, TextStyle.Style1); .)			
	        | operatorTok (. Add(t.pos, t.val.Length, TextStyle.Style3); .)
	        | intTok (. Add(t.pos, t.val.Length, TextStyle.Style6); .)
		    | stringTok (. Add(t.pos, t.val.Length, TextStyle.Style5); .)	
		    | address (. Add(t.pos, t.val.Length, TextStyle.Style8); .)
		).
		
	Code = 
	    (
	        OpNum
	        | Keyword
	        | Value
	        | SingleLineComment
	        | NL
	    ).
	
	Eil = Code { Code }.

END Eil.