let simple {eq,eqt} =
        eq (t + 2) 6
        $ eq t 4
        $ eqt (t == 4)
        where t = (& 2 + 2)
    
let lazyList {eqt} =
        eqt (lst is (0::1::xs))
        where make n = n :: (& make (n + 1))
           et lst = make 0
           
let lazyList2 {eqt} =
          eqt <| xs is (1::2::3::_)
        $ eqt <| xs is (1::2::3::1::2::3::_)
        where cycle xs = xs ++ (& cycle xs)
           et xs = cycle [1,2,3]
                
let memoization {eq} =
        let x = {!x=0} in
        let fun () = x.x <- x.x + 1 $ x in
        let t = (& (fun ()).x ) in
          t + 0
        $ t + 1
        $ eq x.x 1
    
let typeCheck {eqt} =
        let t = (& 2 * 2) in
        eqt (t is ?lazy)
        $ t + 0
        $ eqt (t is ?int)