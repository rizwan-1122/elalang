let simple {eq,eqt} =
    let rng = [1..3] in
      eq (length rng) 3
    $ eqt <| rng is (1::2::3::[])
end
    
let withStep {eq,eqt} =
    let rng = [1,3..12] in
      eq (length rng) 6
    $ eqt <| rng is [1,3,5,7,9,11]
end
    
let withStep2 {eq,eqt} =
    let rng = [5,4.. 0] in
      eq (length rng) 6
    $ eqt <| rng is (5::4::3::xs)
    $ eq rng.[5] 0
end
    
let lazySimple {eqt,eqf} = 
    let rng = [1..] in
      eqt <| rng is (1::2::3::xs)
    $ eqf <| rng is (1::2::3::4::[])
end
    
let lazyStep {eqt,eqf} = 
    let rng = [5,10..] in
      eqt <| rng is (5::10::15::xs)
    $ eqf <| rng is (5::10::15::20::[])
end
    
let lazyStep2 {eq,eqt,eqf} = 
    let rng = [10,5..] in
      eqt <| rng is (10::5::0::xs)
    $ eqf <| rng is (10::5::0::_::[])
    $ eqt (rng.[3] < 0)
end
    
let wrong1 {eq,eqt} =
    let rng = [2,1..10] in
      eq (length rng) 2
    $ eqt <| rng is (2::_)
end
    
let wrong2 {eq,eqt} =
    let rng = [5,10..11] in
      eq (length rng) 2
    $ eqt <| rng is (5::10::[])
end
    
let tuples1 {eq} =
    eq (length lst) 10
    $ eq lst.[0] (1,10)
    $ eq lst.[9] (10,19)
    where lst = [(1,10)..(10,20)] end
end
    
let tuples2 {eq} =
    eq (length lst) 7
    $ eq lst.[0] (10,20)
    $ eq lst.[6] (190,1100)
    where lst = [(10,20),(40, 200)..(200,1100)] end
end 