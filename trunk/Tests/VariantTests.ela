let simple {eqt} =
        eqt <| v is (`Some)
        $ eqt <| v2 is (`Some 2)
        $ eqt <| v3 is (`None)
        where v = `Some
           et v2 = `Some 2
           et v3 = `None
    
let simple2 {eqt} = 
        eqt <| v is (`Some (12, _))
        $ eqt <| v2 is (`Some (1::x::xs))
        where v = `Some (12, 20)
           et v2 = `Some [1,2,3]
    
let matchTest {eq} =
        match v with
                `Some m = eq m "message"
        where v = `Some "message"
    
let typeCheck {eqt} =
        let vr  = `None in
        eqt (vr is ?variant)
