let simple {eqt} =
    eqt <| v is (`Some)
    $ eqt <| v2 is (`Some 2)
    $ eqt <| v3 is (`None)
    where v = `Some and
          v2 = `Some 2 and
          v3 = `None
    end 
end
    
let simple2 {eqt} = 
    eqt <| v is (`Some (12, _))
    $ eqt <| v2 is (`Some (1::x::xs))
    where v = `Some (12, 20) and
          v2 = `Some [1,2,3]
    end
end
    
let matchTest {eq} =
    match v with
    `Some m = eq v "message"
    end
    where v = `Some "message" end
end
    
let transparency {eq} = 
    eq (v + 14) 26
    $ eq (14 - v) 2
    $ eq (v * 2) 24
    $ eq (24 / v) 2
    $ eq (v / 2) 6    
    where v = `Some 12 end
end
    
let transparency2 {eq} = 
    eq v 100
    $ eq v1 "message"
    $ eq v2 (1,2)
    where v = `Some 100 and
          v1 = `Some "message" and
          v2 = `Some (1,2)
    end
end
    
let typeCheck {eqt} =
	let vr  = `None in
	eqt (vr is ?variant)
end
