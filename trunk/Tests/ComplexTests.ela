let skipElems {eqt} = 
        let skip lst n = 
                    let ps x::xs i | i == n = xs
                                   | else   = ps xs (i + 1)
                        ps _     _          = () 
                    in
                    if ps lst 1 is (list@r) then Some r else None 
        in
        let res = skip [0, 1, 2, 3] 2 in
        eqt <| res is Some [2,3]

let takeElems {eqt} =
        let take lst n =
                    let pt x::xs i | i == n = [x]
                                   | else   = x :: pt xs (i + 1)
                        pt _     _          = [] 
                    in
                    let r = pt lst 1 in
                    if r is [] then None else Some r 
        in
        let res = take [0, 1, 2, 3, 4] 3 in
        eqt <| res is Some [0,1,2]

let iterators {eqt} =
        let counter f = counter'
                where cc = {!cc=0}
                   et counter' e = f cc.cc e $ cc.cc <- cc.cc + 1
         et comparer 0 1 = eqt true
            comparer 1 4 = eqt true
            comparer 2 7 = eqt true
            comparer 3 2 = eqt true
            comparer 4 5 = eqt true
            comparer 5 8 = eqt true
            comparer 6 3 = eqt true
            comparer 7 6 = eqt true
            comparer 8 9 = eqt true
            comparer _ _ = eqt false
         et lst = [ [1,2,3], [4,5,6], [7,8,9] ]
         et iterate fun x::xs = fun x $ Some xs
            iterate _   []    = None
         et filter f lst = 
                let filter' x::xs | r is Some v = v :: filter' xs
                                  | r is None   = filter' xs
                                  where r = f x
                    filter' []                     = []
                in 
                match filter' lst with
                      [] = ()
                      nl = filter f nl
        et iterate' = iterate (counter comparer)        
        in filter iterate' lst