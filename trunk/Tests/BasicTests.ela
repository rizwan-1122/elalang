let private typ1 = [1,2]
let private typ2 = [1,2]

let equals {eq,eqt,eqf} =
	  eqt (2 == 2)
	$ eqt (12L == 12)
	$ eqt true
	$ eqf false 
	$ eq typ1 typ1 
	$ eq "first" "first" 
	$ eq 'f' 'f'

let notEquals {neq} =
	  neq 2 3 
	$ neq 12L 13
	$ neq true false
	$ neq false true
	$ neq typ1 typ2 
	$ neq "first" "second" 
	$ neq 'f' 'F'
	
let notEquals2 {eqt} =
	  eqt (typ1 <> typ2)
	$ eqt (3 <> 4)
	$ eqt (13L <> 12)
	$ eqt (true <> false)
	$ eqt ("first" <> "second") 
	$ eqt ('F' <> 'f')
		
let compare {eqt} =
	  eqt (12.3 - 12.3 < .001)
	$ eqt (146.23d - 146.23d < .001d)
	$ eqt (24 > 12)
	$ eqt (125L > 124)
	$ eqt (123.23 < 150.0)
	$ eqt (12 >= 12)
	$ eqt (45 <= 46)
	$ eqt (45 <= 45)

let simpleMath {eq,gt,lt} =
	  eq (2 + 2) 4 
	$ eq (2 - 2) 0 
	$ lt (12.4 - .4 - 12.0) .001
	$ eq (23 + 112) 135 
	$ eq (2 * 2) 4 
	$ gt (12.0 * 65.3) 771.0
	$ eq (24 / 2) 12 
	$ eq (25 / 2) 12 
	$ gt (25d / 2.0) 12.0 
	$ eq (25 % 2) 1 
	$ eq (3 ** 2) 9
	
let concat {eq} =
	  eq ("1" ++ "&" ++ "2") "1&2"
	$ eq ('A':string ++ 'B':string ++ 'C':string) "ABC"
	
let priorities {eq} =
	  eq (2 + 2 * 3) 8 
	$ eq (14 / 2 + 4 * 6) 31 
	$ eq (2 + 6 / 3) 4 
	$ eq (1 + 12 - 4 / 2 + 144 * 24 / 12) 299
	
let boolOperators {eq,neq} =
	  neq (2 == 2 && 3 <> 3) 
	$ eq (2 <> 2 || 44 == 44) 
	$ eq (124 > 123 || 3 == 3 && true) 
	$ eq (1 > 2 && 2 < 1 || 1 == 1)
	
let pipeOperators {eq} =
	let fun1 x y = x + y in
    let fun2 x = x * 2 in
    let fun3 x = x - 2 in
	  eq (fun1 2 2 |> fun2 |> fun3) 6 
	$ eq (fun2 <| fun1 2 2) 8
	
let compositionOperators {eq} =
	let fun1 x = x + 2 in
    let fun2 x = x * 2 in
    let fun3 x = x - 2 in
    let comp1 = fun1 >> fun2 >> fun3 in
    let comp2 = fun3 << fun2 << fun1 in
	eq (comp1 2) 6 $ eq (comp2 2) 6
    
let bitwiseOperators {eq} =
    let v = 2 ||| (12 <<< 8) in
      eq v 3074
    $ eq (v &&& 255) 2
    $ eq (v >>> 8) 12

let bitwiseOperators2 {eq} = 
    let v = 0x02 ||| 0x04 in
      eq v 6
    $ eq (v ^^^ 0x04) 2
    
let cast {eq} = 
      eq ("123":int) 123
    $ eq ("12.2":single) 12.2
    $ eq (124:string) "124"
    $ eq ("True":bool) true