let fromLiteral {eq} =
	let arr = [| 'E', 'l', 'a' |] in
    do
        eq (length arr) 3;
        eq arr.[0] 'E';
        eq arr.[1] 'l';
        eq arr.[2] 'a';
    end

let addItems {eq} =
	let arr = [||] in
	do
		arr |> add 0;
		arr |> add 1;
		arr |> add 2;	
		eq arr.[0] 0;
		eq arr.[1] 1;
		eq arr.[2] 2;
		eq (length arr) 3;
	end

let removeItems {eq} =
	let arr = [| 10, 20, 30 |] in
	do
		arr |> remove 1;
		eq (length arr) 2;
		eq arr.[0] 10;
		eq arr.[1] 30;
	end

let insertItems {eq} =
	let arr = [| 1, 3, 5 |] in
	do
		arr |> insert 0 0;
		arr |> insert 2 2;
		arr |> insert 4 4;
		eq (length arr) 6;
		eq arr.[0] 0; 
		eq arr.[2] 2; 
		eq arr.[4] 4;
	end

let clearItems {eqt,eq} =
	let arr = [| 1, 2, 3 |] in
    let b = (length arr) == 3 
    in
    do
        clear arr;
        eqt b;
        eq (length arr) 0;
    end

let concatArrays {eq} =
	let arr1 = [| 'E', 'l', 'a' |] in
    let arr2 = [| 'l', 'a', 'n', 'g' |] in
    let res = arr1 ++ arr2 
    in
    do
        var str = "";
        
        for e in res do 
            str <- str ++ e:string
        end
        
        eq str "Elalang"
    end

let iterateItems {eqt} =
	let arr = [| 0, 1, 2, 3 |] in
	do
		var b = true;
   
        for i to 3 do
			if i <> arr.[i] then
				b <- false
            else ()
		end
    
        var c = -1;
        
		for e in arr do
			if ((c <- c + 1) $ c) <> e then
				b <- false
            else ()
		end
	
        eqt b
    end

let typeCheck {eqt} =
	let arr = [| 0, 1 |] in
	eqt (arr is array)