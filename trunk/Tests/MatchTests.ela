let literalMatch {eqt} = 
    eqt (match 1 with 1 = true; _ = false end)
    $ eqt (match 124 with 124 = true; _ = false end)
    $ eqt (match 240L with 240L = true; _ = false end)
    $ eqt (match 42.42 with 42.42 = true; _ = false end)
    $ eqt (match 412.42D with 412.42D = true; _ = false end)
    $ eqt (match 'c' with 'c' = true; _ = false end)
    $ eqt (match "Hello" with "Hello" = true; _ = false end)
    $ eqt (match true with true = true; _ = false end)
    $ eqt (match false with false = true; _ = false end)

let varMatch {eqt} = 
    eqt (match 42 with x = x == 42 end)
    $ eqt (match 'H' with y = y == 'H' end)
    
let listMatch {eqt} =
    eqt (match lst with x::xs = true; _ = false end)
    $ eqt (match lst with 1::xs = true; _ = false end)
    $ eqt (match lst with 1::2::3::xs = true; _ = false end)
    $ eqt (match lst with 1::y::3::xs = y == 2; _ = false end)
    $ eqt (match lst with 1::2::3::[] = false; _ = true end)
    $ eqt (match lst with x::y::z::xs = x == 1 && y == 2 && z == 3; _ = true end)
    where lst = [1,2,3,4,5] end 
    
let listMatch2 {eqt} =
    eqt (match lst with [1,2,3] = false; _ = true end)
    $ eqt (match lst with [1,2,3,4,5] = true; _ = false end)
    $ eqt (match lst with [x,y,z,4,5] = x == 1 && y == 2 && z == 3; _ = false end)
    where lst = [1,2,3,4,5] end 
    
let tupleMatch {eqt} =
    eqt (match tup with (1,2,3) = true; _ = false end)
    $ eqt (match tup with (1,2) = false; _ = true end)
    $ eqt (match tup with (x,y,z) = x == 1 && y == 2 && z == 3; _ = false end)
    where tup = (1,2,3) end
    
let arrayMatch {eqt} =
    eqt (match arr with [|1,2,3|] = false; _ = true end)
    $ eqt (match arr with [|1,2,3,4,5|] = true; _ = false end)
    $ eqt (match arr with [|x,y,z,4,5|] = x == 1 && y == 2 && z == 3; _ = false end)
    where arr = [|1,2,3,4,5|] end 
    
let recordMatch {eqt} =
    eqt (match rec with (1,2,3) = true; _ = false end)
    $ eqt (match rec with {x=1,z=3,y=2} = true; _ = false end)
    $ eqt (match rec with {x=1,y=2} = true; _ = false end)
    $ eqt (match rec with {x,y,z} = x == 1 && y == 2 && z == 3; _ = false end)
    where rec = {x=1,y=2,z=3} end
    
let unitMatch {eqt} =
    eqt (match () with () = true; _ = false end)
    $ eqt (match 123 with () = false; _ = true end)
    
let variantMatch {eqt} =
    eqt (match s with `Some = true; _ = false end)
    $ eqt (match s with `Some 12 = true; _ = false end)
    $ eqt (match s with `Some x = x == 12; _ = false end)
    $ eqt (match s2 with `Some = true; _ = false end)
    $ eqt (match s2 with `Some (1,2,3) = true; _ = false end)
    $ eqt (match s2 with `Some x = x == (1,2,3); _ = false end)
    $ eqt (match n with `None = true; _ = false end)
    where s = `Some 12 and
          s2 = `Some (1,2,3) and
          n = `None
    end
    
let typeCheckMatch {eqt} =
    eqt (match 1 with x ? int = true; _ = false end)
    $ eqt (match (1,2) with x ? tuple = true; _ = false end)
    $ eqt (match [1,2] with x ? list = true; _ = false end)
    
let traitCheckMatch {eqt} =
    eqt (match 1 with x ? <Num,Eq> = true; _ = false end)
    $ eqt (match (1,2) with x ? <Get,Len> = true; _ = false end)
    $ eqt (match [1,2] with x ? <Fold,Cons> = true; _ = false end)
    
let castMatch {eqt} =
    eqt (match "1" with x:int = x == 1; _ = false end)
    $ eqt (match 1 with x:string = x == "1"; _ = false end)
    
let asMatch {eqt} =
    eqt (match 4 with 4@n = n == 4; _ = false end)
    $ eqt (match (1,2) with (1,2)@t = t == (1,2); _ = false end)
    
let guards {eqt} =
    eqt v
    where v = match (1,4,3) with
              (x,y,z) | x > z = false;
                      | z > x && x + z == y = true
              end
    end
    
let guards2 {eqt} =
    eqt v
    where v = match (10,10) with
              (x,y) | x > y = false;
                    | x < y = false;
                    | else  = true
              end
    end 
    
let shortMatch {eq,eqt} =
    if v ? (x,2,3) then
        eq x 1
    else
        eqt false
    where v = (1,2,3) end 