let literalMatch {eqt} = 
          eqt (match 1 with 1 = true; _ = false;;)
        $ eqt (match 124 with 124 = true; _ = false;;)
        $ eqt (match 240L with 240L = true; _ = false;;)
        $ eqt (match 42.42 with 42.42 = true; _ = false;;)
        $ eqt (match 412.42D with 412.42D = true; _ = false;;)
        $ eqt (match 'c' with 'c' = true; _ = false;;)
        $ eqt (match "Hello" with "Hello" = true; _ = false;;)
        $ eqt (match true with true = true; _ = false;;)
        $ eqt (match false with false = true; _ = false;;)
    
let varMatch {eqt} = 
          eqt (match 42 with x = x == 42;;)
        $ eqt (match 'H' with y = y == 'H';;)
    
let listMatch {eqt} =
          eqt (match lst with x::xs = true; _ = false;;)
        $ eqt (match lst with 1::xs = true; _ = false;;)
        $ eqt (match lst with 1::2::3::xs = true; _ = false;;)
        $ eqt (match lst with 1::y::3::xs = y == 2; _ = false;;)
        $ eqt (match lst with 1::2::3::[] = false; _ = true;;)
        $ eqt (match lst with x::y::z::xs = x == 1 && y == 2 && z == 3; _ = true;;)
        where lst = [1,2,3,4,5]
    
let listMatch2 {eqt} =
          eqt (match lst with [1,2,3] = false; _ = true;;)
        $ eqt (match lst with [1,2,3,4,5] = true; _ = false;;)
        $ eqt (match lst with [x,y,z,4,5] = x == 1 && y == 2 && z == 3; _ = false;;)
        where lst = [1,2,3,4,5]
    
let tupleMatch {eqt} =
          eqt (match tup with (1,2,3) = true; _ = false;;)
        $ eqt (match tup with (1,2) = false; _ = true;;)
        $ eqt (match tup with (x,y,z) = x == 1 && y == 2 && z == 3; _ = false;;)
        where tup = (1,2,3)

let recordMatch {eqt} =
          eqt (match rec with (1,2,3) = true; _ = false;;)
        $ eqt (match rec with {x=1,z=3,y=2} = true; _ = false;;)
        $ eqt (match rec with {x=1,y=2} = true; _ = false;;)
        $ eqt (match rec with {x,y,z} = x == 1 && y == 2 && z == 3; _ = false;;)
        where rec = {x=1,y=2,z=3}
    
let unitMatch {eqt} =
          eqt (match () with () = true; _ = false;;)
        $ eqt (match 123 with () = false; _ = true;;)
    
let variantMatch {eqt} =
          eqt (match s with Some = true; _ = false;;)
        $ eqt (match s with Some 12 = true; _ = false;;)
        $ eqt (match s with Some x = x == 12; _ = false;;)
        $ eqt (match s2 with Some = true; _ = false;;)
        $ eqt (match s2 with Some (1,2,3) = true; _ = false;;)
        $ eqt (match s2 with Some x = x == (1,2,3); _ = false;;)
        $ eqt (match n with None = true; _ = false;;)
        where s  = Some 12
           et s2 = Some (1,2,3)
           et n  = None
    
let typeCheckMatch {eqt} =
          eqt (match 1 with ?int = true; _ = false;;)
        $ eqt (match (1,2) with ?tuple = true; _ = false;;)
        $ eqt (match [1,2] with ?list = true; _ = false;;)
    
let asMatch {eqt} =
        eqt (match 4 with 4@n = n == 4; _ = false;;)
        $ eqt (match (1,2) with (1,2)@t = t == (1,2); _ = false;;)
    
let guards {eqt} =
            eqt v
            where v = match (1,4,3) with
                            (x,y,z) | x > z = false
                                    | z > x && x + z == y = true
    
let guards2 {eqt} =
        eqt v
        where v = match (10,10) with
                        (x,y) | x > y = false
                              | x < y = false
                              | else  = true
    
let guards3 {eqt} =
        eqt v
        where v = match (10,2) with
                        (x,y) | r > 8 = false
                              | r < 8 = false
                              | else  = true
                              where r = x - y 

let guards4 {eqt} = eqt v
        where v = match "ela" with
                        x::xs | x == 'E' = false
                              | x == 'L' = false
                        "ELA"            = false
                        str              = str == "ela"

let guards6 {eqt} =
        eqt <| (compare 100 12) is Lt
        $ eqt <| (compare 12 100) is Gt
        $ eqt <| (compare 13 13) is Eq
        where compare x y | y >  x = Gt
                          | y == x = Eq
                          | else   = Lt 

let parallel {eqt} = eqt v
        where v = match (1,2,3) with
                        (x,y,z) = x + y + z == 6
                        _       = false

let parallel2 {eqt} = eqt v
        where v = match (1,) with
                        (x,) = x == 1
                        _    = false

let shortMatch {eq,eqt} =
        if v is (x,2,3) then
            eq x 1
        else
            eqt false
        where v = (1,2,3)
    
let shortMatch2 {eq,eqt} =
        if v is Some [x,2] then
            eq x 12
        else
            eqt false
        where v = Some [12,2]
        
let firstSecond {eq} =
        eq (fst (2, 3)) 2 $ eq (snd (3, 4)) 4
        where fst (x,_) = x
           et snd (_,y) = y