<?xml-stylesheet type="text/xsl" href="Template.xsl"?>
<article title="Lib.Core" type="module">

<section level="1" title="Introduction" />
Core module contains multiple important functions including math functions, functions to work with lists, etc. 

<section level="1" title="Math functions" />

<section level="2" title="abs"/>
<code>
abs n
</code>
Returns an absolute value of a given number.

<section level="2" title="exp"/>
<code>
exp n
</code>
Returns <key>e</key> raised to a specified power.

<section level="2" title="gcd"/>
<code>
gcd x y
</code>
Returns the greatest common divisor for the two given arguments.

<section level="2" title="cos"/>
<code>
cos x
</code>
Returns the cosine of the specified angle.

<section level="2" title="sin"/>
<code>
sin x
</code>
Returns the sine of the specified angle.

<section level="2" title="acos"/>
<code>
acos x
</code>
Returns the angle whose cosine is the specified number.

<section level="2" title="asin"/>
<code>
asin x
</code>
Returns the angle whose sine is the specified number.

<section level="2" title="tan"/>
<code>
tan x
</code>
Returns the tangent of the specified angle.

<section level="2" title="quot"/>
<code>
quot x y
</code>
Calculates the quotinent of two given integers.

<section level="2" title="lcm"/>
<code>
lcm 4 3
</code>
Calculates the least common multiple of two given arguments.

<section level="2" title="floor"/>
<code>
floor n
</code>
Returns the largest integer less than or equal to the specified number:
<code>floor 12.6 == 12</code>

<section level="2" title="ceiling"/>
<code>
ceiling n
</code>
Returns the smallest integer greater than or equal to the specified number:
<code>ceiling 12.01 == 13</code>

<section level="2" title="atan"/>
<code>
atan x
</code>
Returns the angle whose tangent is the specified number.

<section level="2" title="sqrt"/>
<code>
sqrt x
</code>
Returns the square root of a specified number.

<section level="2" title="truncate"/>
<code>
truncate x
</code>
Calculates the integral part of a specified number.

<section level="2" title="log"/>
<code>
log x
</code>
Returns the natural (base e) logarithm of a specified number.

<section level="2" title="even"/>
<code>
even x
</code>
Returns <key>true</key> if the specified number is even, otherwise returns <key>false</key>.

<section level="2" title="odd"/>
<code>
odd x
</code>
Returns <key>true</key> if the specified number is odd, otherwise returns <key>false</key>.

<section level="2" title="maxValue"/>
<code>
maxValue x y
</code>
Returns <key>x</key> if <key>x</key> is greater or equal to <key>y</key>, otherwise returns <key>y</key>.

<section level="2" title="minValue"/>
<code>
minValue x y
</code>
Returns <key>x</key> if <key>x</key> is lesser or equal to <key>y</key>, otherwise returns <key>y</key>.

<section level="2" title="round"/>
<code>
round x
</code>
Rounds a number to a nearest integer:
<code>round 41.6 == 42</code>

<section level="2" title="rnd"/>
<code>
rnd seed min max
</code>
A randomize function. It returns a pseudo random number which is equal or greater to <key>min</key> and 
equal or lesser than <key>max</key>.

<section level="2" title="pi"/>
<code>
pi
</code>
Represents the ratio of the circumference of a circle to its diameter, specified by the constant, Ï€.

<section level="2" title="e"/>
<code>
e
</code>
Represents the natural logarithmic base, specified by the constant, e.

<section level="1" title="Conversion functions" />

<section level="2" title="chr"/>
<code>
chr n
</code>
Converts a given integer number to a char. This function is equivalent to <key>toChar</key> function called for integer number.

<section level="2" title="ord"/>
<code>
ord c
</code>
Converts a given char to an integer number. This function is equivalent to <key>toInt</key> function called for char.

<section level="1" title="List functions" />

<section level="2" title="last"/>
<code>
last xs
</code>
Returns the last element of a given list:
<code>last [1,2,3] == 3</code>
This function throws a <key>Failure</key> if its argument is an empty list.

<section level="2" title="init"/>
<code>
init xs
</code>
Returns a list without the last element:
<code>init [1,2,3] == [1,2]</code>
This function throws a <key>Failure</key> if its argument is an empty list.

<section level="2" title="takeWhile"/>
<code>
takeWhile p xs
</code>
Returns elements from a list <key>xs</key> that satisfy a predicate <key>p</key> until the predicate
fails: 
<code>takeWhile (&lt;5) [1..10] == [1,2,3,4]</code>

<section level="2" title="take"/>
<code>
take n xs
</code>
Takes <key>n</key> elements from <key>xs</key> list.

<section level="2" title="skip"/>
<code>
skip n xs
</code>
Skips <key>n</key> elements starting from the head of <key>xs</key> list.

<section level="2" title="map"/>
<code>
map f xs
</code>
Maps a functions <key>f</key> to all elements of <key>xs</key> list and constructs a new list.

<section level="2" title="map'"/>
<code>
map' f xs
</code>
Maps a functions <key>f</key> to all elements of <key>xs</key> list and constructs a new list. This is a non-strict function, it always constructs a lazy list.

<section level="2" title="filter"/>
<code>
filter f xs
</code>
Returns all elements from list <key>xs</key> that satisfy <key>f</key> predicate.

<section level="2" title="filter'"/>
<code>
filter' f xs
</code>
Returns all elements from list <key>xs</key> that satisfy <key>f</key> predicate. This is a non-strict function, it always constructs a lazy list.
  
<section level="2" title="foldl"/>
<code>
foldl f z xs
</code>
Function <key>foldl</key>, applied to a binary operator, a starting value (typically the left-identity of the operator), and a list, reduces the 
list using the binary operator, from left to right.

<section level="2" title="foldr"/>
<code>
foldr f z xs
</code>
Function <key>foldr</key>, applied to a binary operator, a starting value (typically the left-identity of the operator), and a list, reduces the 
list using the binary operator, from right to left.

<section level="2" title="fold"/>
<code>
fold f xs == foldr f [] xs
</code>
This function is equivalent to <key>foldr</key> called with a nil list as its second argument.

<section level="2" title="concat"/>
<code>
concat xs
</code>
Concatenates a list of lists: 
<code>concat [[1],[2]] == [1,2]</code>

<section level="2" title="concatMap"/>
<code>
concatMap f xs
</code>
Map a function over a list and concatenate the results.

<section level="2" title="sum"/>
<code>
sum xs
</code>
Computes the sum of a finite list of numbers:
<code>sum [1,2,3] == 6</code>

<section level="2" title="product"/>
<code>
product xs
</code>
Computes the product of a finite list of numbers.

<section level="2" title="minimum"/>
<code>
minimum xs
</code>
Returns a minimum element of a given list:
<code>minimum [1,2,3] == 1</code>

<section level="2" title="maximum"/>
<code>
maximum xs
</code>
Returns a maximum element of a given list:
<code>maximum [1,2,3] == 1</code>

<section level="2" title="reverse"/>
<code>
reverse xs
</code>
Reverses a given list:
<code>reverse [1,2,3] == [3,2,1]</code>

<section level="2" title="zipWith"/>
<code>
zipWith f xs1 xs2
</code>
Function <key>zipWith</key> zips lists with the function given as the first argument.

<section level="2" title="zipWith"/>
<code>
zip xs1 xs2
</code>
This function is equivalent to <key>zipWith</key> function called with a tupling function as a first argument. It produces a list
of tuples:
<code>
zip [1,2,3] [4,5,6] == [(1,4),(2,5),(3,6)]
</code>

<section level="2" title="zipWith3"/>
<code>
zipWith3 f xs1 xs2 xs3
</code>
The same as <key>zipWith</key> function but for three lists.

<section level="2" title="zip3"/>
<code>
zip3 xs1 xs2 xs3
</code>
The same as <key>zip</key> function but for three lists.

<section level="2" title="any"/>
<code>
any f xs
</code>
Returns <key>true</key> if at least one of the elements in <key>xs</key> list satisfies <key>f</key> predicate.

<section level="2" title="all"/>
<code>
all f xs
</code>
Returns <key>true</key> if all elements in <key>xs</key> list satisfy <key>f</key> predicate.

<section level="2" title="splitAt"/>
<code>
splitAt n xs
</code>
Splits a list <key>xs</key> at the index <key>n</key> and produces a tuple with two lists:
<code>splitAt 3 [1..5] = ([1,2,3],[4,5])</code>
This function throw a <key>Failure</key> if <key>n</key> argument is less than zero.

<section level="2" title="span"/>
<code>
span p xs
</code>
Function <key>span</key>, applied to a predicate <key>p</key> and a list <key>xs</key>, returns a tuple where first element is longest prefix (possibly empty) 
of <key>xs</key> of elements that satisfy <key>p</key> and second element is the remainder of the list:
<code>span (&lt;3) [1,2,3,4,1,2,3,4] == ([1,2],[3,4,1,2,3,4])</code>

<section level="2" title="span"/>
<code>
breakList p xs
</code>
This function is equivalent to <key>span (not &lt;&lt; p)</key>:
<code>breakList (&gt;3) [1,2,3,4,1,2,3,4] == ([1,2,3],[4,1,2,3,4])</code>
  
<section level="2" title="drop"/>
<code>
drop n xs
</code>
Function <key>drop</key> returns the suffix of <key>xs</key> after the first n elements, or a nil list if <key>n</key> is greater than the length of a list.
This function throws a <key>Failure</key> if <key>n</key> argument is less than zero.
  
<section level="2" title="dropWhile"/>
<code>
dropWhile p xs
</code>
Function <key>dropWhile</key> returns the suffix remaining after <key>takeWhile</key>, called with the same arguments.

<section level="2" title="dropWhile"/>
<code>
index e xs
</code>
Returns an index of an element <key>e</key> in a list <key>xs</key>:
<code>index 3 [1,2,3,4] == 2</code>
  
<section level="2" title="elem"/>
<code>
elem e xs
</code>
Returns <key>true</key> if a list <key>xs</key> contains an element <key>e</key>, otherwise returns <key>false</key>.

<section level="2" title="notElem"/>
<code>
notElem e xs
</code>
This function is equivalent to <key>not (elem e xs)</key>.

<section level="2" title="elemBy"/>
<code>
elemBy eq e xs
</code>
This function is similar to <key>elem</key> but accepts a custom equality operator as a first argument. Function <key>elem</key>
can be defined in the terms of <key>elemBy</key> as:
<code>let elem = elem</code>

<section level="2" title="scanl"/>
<code>
scanl f z xs
</code>
Function <key>scanl</key> is similar to <key>foldl</key>, but returns a list of successive reduced values from the left.
  
<section level="2" title="scanr"/>
<code>
scanr f z xs
</code>
Function <key>scanr</key> is the right-to-left version of <key>scanl</key>.

<section level="2" title="repeat"/>
<code>
repeat e
</code>
Repeats a given element and constructs an infinite list. This function is non-strict.

<section level="2" title="cycle"/>
<code>
cycle xs
</code>
Cycles a given list and constructs an infinite list. This function is non-strict.

<section level="2" title="iterate"/>
<code>
iterate f x
</code>
Constructs a lazy list by applying function <key>f</key> to <key>x</key>. This function is non-strict. It can be seen as a generalization
of <key>repeat</key> function. Function <key>repeat</key> can be defined in terms of <key>iterate</key> as:
<code>let repeat = iterate id</code>

<section level="2" title="replicate"/>
<code>
replicate n x
</code>
The application <key>replicate n x</key> is equivalent to <key>take n (repeat x)</key>.

<section level="2" title="deleteBy"/>
<code>
deleteBy p e xs
</code>
Constructs a new list from the elements of <key>xs</key> list but excludes all elements for which an application of a binary predicate
<key>p</key> returns <key>true</key>.

<section level="2" title="delete"/>
<code>
delete e xs
</code>
Function <key>delete</key> can be defined in terms of <key>deleteBy</key> like so:
<code>let delete = deleteBy (==)</code>
  
<section level="2" title="insert"/>
<code>
insert x xs
</code>
The <key>insert</key> function takes an element and a list and inserts the element into the list at the last position where it is still less than or equal to the next element. 
In particular, if the list is sorted before the call, the result will also be sorted. It is a special case of <key>insertBy</key>, which allows the programmer to supply their own comparison function.

<section level="2" title="insertBy"/>
<code>
insertBy cmp x xs
</code>
A version of <key>insert</key> function that allows to specify your own comparison function.
  
<section level="2" title="nub"/>
<code>
nub xs
</code>
Removes duplicate elements from list.

<section level="2" title="nubBy"/>
<code>
nubBy cmp xs
</code>
A version of <key>nub</key> function that allows to specify your own comparison function.

<section level="2" title="intersperse"/>
<code>
intersperse e xs
</code>
Takes an element and a sequence and intersperses that element between the elements of the sequence:
<code>intersperse 0 [1,2,3] = [1,0,2,0,3]</code>

<section level="2" title="transpose"/>
<code>
transpose xs
</code>
Transposes the rows and columns of its argument:
<code>transpose [[1,2,3],[4,5,6]] = [[1,4],[2,5],[3,6]]</code>

<section level="2" title="intercalate"/>
<code>
intercalate xs xss
</code>
Inserts the given sequence in between the sequences and concatenates the result.

<section level="2" title="nonEmptySubsequences"/>
<code>
nonEmptySubsequences xs
</code>
Returns the list of all subsequences of the argument, except for the empty list:
<code>nonEmptySubsequences [1,2] = [[1],[2],[1,2]]</code>

<section level="2" title="subsequences"/>
<code>
subsequences xs
</code>
Returns the list of all subsequences of the argument:
<code>subsequences [1,2] = [[], [1],[2],[1,2]]</code>

<section level="2" title="permutations"/>
<code>
permutations xs
</code>
Returns a list with all permutations of the argument:
<code>permutations [1,2,3] == [[1,2,3],[2,1,3],[3,2,1],[2,3,1],[3,1,2],[1,3,2]]</code>

<section level="2" title="groupBy"/>
<code>
groupBy eq xs
</code>
Takes a predicate and two lists and returns the first list with the first occurrence of each element of the second list removed.

<section level="2" title="group"/>
<code>
group xs
</code>
This function can be defined in terms of <key>groupBy</key> as follows:
<code>let group = groupBy (==)</code>

<section level="2" title="intersectBy"/>
<code>
intersectBy eq xs ys
</code>
Takes the list intersection of two lists.

<section level="2" title="intersect"/>
<code>
intersect xs ys
</code>
This function can be defined in terms of <key>intersectBy</key> as follows:
<code>let intersect = intersectBy (==)</code>
  
  
  <section level="1" title="Referencing module" />
Core module is a part of Ela standard library. It can be referenced from code using <key>open</key> directive like so:
<code>open Core</code>
</article>