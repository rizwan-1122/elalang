#file generic.ela
#title generic
#category Ela Standard Library
This module contains high performance reflection API that allows to inspect instances of algebraic types
at run-time. Also this module contains default instances for many of the standard classes defined in prelude.
These default instances are implemented through reflection API and, therefore, are generic and would work
for any algebraic type.

#members

IntLike-
This is a default implementation of a `IntLike` class. It can be used to generate instances of `IntLike` (e.g.
using `deriving` clause). This implementation would work for any custom algebraic type.//br
It relies on a declaration order of constructors in an algebraic type:
>>>type Letters = A | B | C | D 
>>>  deriving IntLike
>>>
>>>toInt B

LongLike-
This is a default implementation of a `LongLike` class. It is defined through `IntLike` default implementation 
like so:
>>toLong = toLong << toInt

StringLike-
This is a default implementation of a `StringLike` class. It can be used to generate instances of `StringLike` 
(e.g. using `deriving` clause). A `toString` function in this instance always returns a name of a constructor 
of a given production.

ListLike-
This is a default implementation of a `ListLike` class. It can be used to generate instances of `ListLike` 
(e.g. using `deriving` clause). A `toList` function in this instance returns a list with parameters of a given
constructor. If a given constructor has no parameters, than an empty list is returned.

TupleLike-
This is a default implementation of a `TupleLike` class. It can be used to generate instances of `TupleLike` 
(e.g. using `deriving` clause). A `toTuple` function in this instance always returns a tuple with parameters of
a given production. If a production was created using a parameterless constructor, than an error is generated.

Enum-
This is a default implementation of an `Enum` class. It defines all members of `Enum` class. It can be used to 
generate instances of `Enum` (e.g. using `deriving` clause). This implementation would work for any 
custom algebraic type.//br
It relies on a declaration order of constructors in an algebraic type:
>>>type FooBar = Foo | Bar
>>>  deriving Enum Show
>>>
>>>succ Foo
This implementation allows to use custom types in ranges.

Len-
This is a default implementation of a `Len` class. It can be used to generate instances of `Len` (e.g. using `deriving` 
clause). This implementation would work for any custom algebraic type.//br
This implementation returns a number of parameters for a given constructor.

Name-
This is a default implementation of an `Name` class. It defines all members of `Name` class. It can be used to 
generate instances of `Name` (e.g. using `deriving` clause). This implementation would work for any 
custom algebraic type.//br
This implementation of `Name` allows to treat productions of an algebraic types as records and to use record
like syntax to access members of these productions:
>>>type Point = Point x y
>>>  deriving Name
>>>
>>>p = Point 12 24
>>>p.x

Ix-
This is a default implementation of an `Ix` class. It can be used to generate instances of `Ix` (e.g. using `deriving` 
clause). This implementation would work for any custom algebraic type.//br
This implementation returns a parameter of a given constructor at a given index.

Show-
This is a default implementation of an `Show` class. It defines all members of `Show` class. It can be used to 
generate instances of `Show` (e.g. using `deriving` clause). This implementation would work for any 
custom algebraic type.//br
This implementation takes into account, whether a constructor was declared in a prefix or in an infix form:
>>>type Complex = a :+ b
>>>  deriving Show
>>>
>>>show (2 :+ 3)

Ord-
This is a default implementation of an `Ord` class. It defines all members of `Ord` class. It can be used to 
generate instances of `Ord` (e.g. using `deriving` clause). This implementation would work for any 
custom algebraic type.//br
It relies on a declaration order of constructors in an algebraic type.

Eq-
This is a default implementation of an `Eq` class. It defines all members of `Eq` class. It can be used to 
generate instances of `Eq` (e.g. using `deriving` clause). This implementation would work for any 
custom algebraic type.//br
It relies on a declaration order of constructors in an algebraic type.