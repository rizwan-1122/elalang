<?xml-stylesheet type="text/xsl" href="Template.xsl"?>
<article title="Variants">

  <section level="1" title="Introduction" />
  This article discusses a variant data type.
  
  <section level="1" title="Overview" />
  Variants in Ela are somewhat similar to <i>polymorphic variants</i> in OCaml language. This is a pretty straightforward data type. It allows you to attach a tag to a particular
  value like so:
  <code>let x = Some 12</code>
Tags should always start with a capital letter (unlike variables which never start with a capital letter).
<br/>
Variants may be useful in cases when you want to associate additional information with value. For example, consider a safe division function:
<code>let x /. 0 = None
    x /. y = Some (x/y)</code>
This function is defined through pattern matching and returns variant <key>None</key> if a divider is zero, otherwise it returns a result of division 
packed in a variant <key>Some</key>.
<br/>
The literal form for variant has the following syntax:
<code>Tag [expr]</code>
For convenience <key>expr</key> clause is optional as you have seen in example above, however creating a variant like so <key>None</key> has exactly the same effect
as the following expression: <key>None ()</key>. In other words a variant created without an argument automatically wraps a unit value.
<br/>
Also unlike OCaml language variant tags in Ela can't be attached to several values. For example the following code would result in an error:
<code>let v = Some 1 2</code>
In order to attach a variant tag to several values one can use tuples like so:
<code>let v = Some (1,2)</code>

<section level="1" title="Pattern Matching"/>
Variants can be deconstructed using pattern matching - with effectively the same syntax as used for their literal form:
<code>let x = Some 12
let (Some y) = x
y //equals 12</code>
It is imporant to remember that a variant pattern should be always enclosed in parenthesis.
</article>